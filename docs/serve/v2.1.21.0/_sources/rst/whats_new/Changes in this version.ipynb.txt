{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# What's new in RuleKit version 2.1.21.0?\n",
    "\n",
    "\n",
    "### 1. Ability to use user-defined quality measures during rule induction, pruning, and voting phases.\n",
    "\n",
    "Users can now define custom quality measures function and use them for: growing, pruning and voting. Defining quality measure function is easy and straightforward, see example below.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from rulekit.classification import RuleClassifier\n",
    "\n",
    "def my_induction_measure(p: float, n: float, P: float, N: float) -> float:\n",
    "    # do anything you want here and return a single float...\n",
    "    return (p + n) / (P + N)\n",
    "\n",
    "def my_pruning_measure(p: float, n: float, P: float, N: float) -> float:\n",
    "    return p - n\n",
    "\n",
    "def my_voting_measure(p: float, n: float, P: float, N: float) -> float:\n",
    "    return (p + 1) / (p + n + 2)\n",
    "\n",
    "python_clf = RuleClassifier(\n",
    "    induction_measure=my_induction_measure,\n",
    "    pruning_measure=my_pruning_measure,\n",
    "    voting_measure=my_voting_measure,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This function was available long ago in the original Java library, but there were some technical problems that prevented its implementation in that package. Now, with the release of RuleKit v2, it is finally available.\n",
    "\n",
    "> ⚠️ Using this feature comes at a price. Using the original set of quality measures from `rulekit.params.Measures` provides an optimized and much faster implementation of these quality functions in Java. Using a custom Python function **will certainly slow down the model learning process**. For example, learning rules on the Iris dataset using the FullCoverage measure went from 1.8 seconds to 10.9 seconds after switching to using the Python implementation of the same measure.\n",
    "\n",
    "\n",
    "### 2. Reading arff files from url via HTTP/HTTPS.\n",
    "\n",
    "In the last version of the package, a new function for reading arff files was added. It made it possible to read an arff file by accepting the file path or a file-like object as an argument. As of this version, the function also accepts URLs, giving it the ability to read an arff dataset directly from some servers via HTTP/HTTPS. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from rulekit.arff import read_arff\n",
    "\n",
    "df: pd.DataFrame = read_arff(\n",
    "    'https://raw.githubusercontent.com/'\n",
    "    'adaa-polsl/RuleKit/refs/heads/master/data/seismic-bumps/'\n",
    "    'seismic-bumps.arff'\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. Improves rules API\n",
    "\n",
    "Access to some basic rule information was often quite cumbersome in earlier versions of this package. For example, there was no easy way to access information about the decision class of a classification rule. \n",
    "\n",
    "In this version, rule classes and rule sets have been refactored and improved. Below is a list of some operations that are now much easier. \n",
    "\n",
    "#### 3.1 For classification rules\n",
    "\n",
    "You can now access rules decision class via `rulekit.rules.ClassificationRule.decision_class` field. Example below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Decision class of the first rule:  0\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from rulekit.arff import read_arff\n",
    "from rulekit.classification import RuleClassifier\n",
    "from rulekit.rules import RuleSet, ClassificationRule\n",
    "\n",
    "DATASET_URL: str = (\n",
    "    'https://raw.githubusercontent.com/'\n",
    "    'adaa-polsl/RuleKit/refs/heads/master/data/seismic-bumps/'\n",
    "    'seismic-bumps.arff'\n",
    ")\n",
    "df: pd.DataFrame = read_arff(DATASET_URL)\n",
    "X, y = df.drop('class', axis=1), df['class']\n",
    "\n",
    "clf: RuleClassifier = RuleClassifier()\n",
    "clf.fit(X, y)\n",
    "\n",
    "# RuleSet class became generic now\n",
    "ruleset: RuleSet[ClassificationRule] = clf.model\n",
    "rule: ClassificationRule = ruleset.rules[0]\n",
    "print('Decision class of the first rule: ', rule.decision_class)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3.2 For regression rules\n",
    "\n",
    "You can now access rules decision attribute value via `rulekit.rules.RegressionRule.conclusion_value` field. Example below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Decision value of the first rule:  0.40274932614553977\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from rulekit.arff import read_arff\n",
    "from rulekit.regression import RuleRegressor\n",
    "from rulekit.rules import RuleSet, RegressionRule\n",
    "\n",
    "DATASET_URL: str = (\n",
    "    'https://raw.githubusercontent.com/'\n",
    "    'adaa-polsl/RuleKit/master/data/methane/'\n",
    "    'methane-train.arff'\n",
    ")\n",
    "df: pd.DataFrame = read_arff(DATASET_URL)\n",
    "X, y = df.drop('MM116_pred', axis=1), df['MM116_pred']\n",
    "\n",
    "reg = RuleRegressor()\n",
    "reg.fit(X, y)\n",
    "\n",
    "ruleset: RuleSet[RegressionRule] = reg.model\n",
    "rule: RegressionRule = ruleset.rules[0]\n",
    "print('Decision value of the first rule: ', rule.conclusion_value)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3.3 For survival rules\n",
    "\n",
    "More changes have been made for survival rules. \n",
    "\n",
    "First, there is a new class `rulekit.kaplan_meier.KaplanMeierEstimator`, which represents Kaplan-Meier estimator rules. In the future, prediction arrays for survival problems will probably be moved from dictionary arrays to arrays of such objects, but this would be a breaking change unfortunately  \n",
    "\n",
    "In addition, one can now easily access the Kaplan-Meier curve of the entire training dataset using the `rulekit.survival.SurvivalRules.get_train_set_kaplan_meier` method.\n",
    "\n",
    "Such curves can be easily plotted using the charting package of your choice."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x281ac8ab830>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from rulekit.arff import read_arff\n",
    "from rulekit.survival import SurvivalRules\n",
    "from rulekit.rules import RuleSet, SurvivalRule\n",
    "from rulekit.kaplan_meier import KaplanMeierEstimator # this is a new class\n",
    "\n",
    "DATASET_URL: str = (\n",
    "    'https://raw.githubusercontent.com/'\n",
    "    'adaa-polsl/RuleKit/master/data/bmt/'\n",
    "    'bmt.arff'\n",
    ")\n",
    "df: pd.DataFrame = read_arff(DATASET_URL)\n",
    "X, y = df.drop('survival_status', axis=1), df['survival_status']\n",
    "\n",
    "surv = SurvivalRules(survival_time_attr='survival_time')\n",
    "surv.fit(X, y)\n",
    "\n",
    "ruleset: RuleSet[SurvivalRule] = reg.model\n",
    "rule: SurvivalRule = ruleset.rules[0]\n",
    "\n",
    "# you can now easily access Kaplan-Meier estimator of the rules\n",
    "rule_estimator: KaplanMeierEstimator = rule.kaplan_meier_estimator\n",
    "plt.step(\n",
    "    rule_estimator.times, \n",
    "    rule_estimator.probabilities,\n",
    "    label='First rule'\n",
    ")\n",
    "# you can also access training dataset Kaplan-Meier estimator easily\n",
    "train_dataset_estimator: KaplanMeierEstimator = surv.get_train_set_kaplan_meier()\n",
    "plt.step(\n",
    "    train_dataset_estimator.times, \n",
    "    train_dataset_estimator.probabilities,\n",
    "    label='Training dataset'\n",
    ")\n",
    "plt.legend(title='Kaplan-Meier curves:')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4. Changes in expert rules induction for regression and survival `❗BREAKING CHANGES`\n",
    "\n",
    "> Note that those changes will likely be reverted on the next version and are caused by a known bug in the original RuleKit library. Fixing it is beyond the scope of this package, which is merely a wrapper for it. \n",
    "\n",
    "Since this version, there has been a change in the way expert rules and conditions for regression and survival problems are communicated. All you have to do is remove conclusion part of those rules (everything after **THEN**).\n",
    "\n",
    "Expert rules before:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "expert_rules = [\n",
    "    (\n",
    "        'rule-0',\n",
    "        'IF [[CD34kgx10d6 = (-inf, 10.0)]] AND [[extcGvHD = {0}]] THEN survival_status = {NaN}'\n",
    "    )\n",
    "]\n",
    "\n",
    "expert_preferred_conditions = [\n",
    "    (\n",
    "        'attr-preferred-0',\n",
    "        'inf: IF [CD34kgx10d6 = Any] THEN survival_status = {NaN}'\n",
    "    )\n",
    "]\n",
    "\n",
    "\n",
    "expert_forbidden_conditions = [\n",
    "    ('attr-forbidden-0', 'IF [ANCrecovery = Any] THEN survival_status = {NaN}')\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And now:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "expert_rules = [\n",
    "    (\n",
    "        'rule-0',\n",
    "        'IF [[CD34kgx10d6 = (-inf, 10.0)]] AND [[extcGvHD = {0}]] THEN'\n",
    "    )\n",
    "]\n",
    "\n",
    "expert_preferred_conditions = [\n",
    "    (\n",
    "        'attr-preferred-0',\n",
    "        'inf: IF [CD34kgx10d6 = Any] THEN'\n",
    "    )\n",
    "]\n",
    "\n",
    "\n",
    "expert_forbidden_conditions = [\n",
    "    ('attr-forbidden-0', 'IF [ANCrecovery = Any] THEN')\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Other changes\n",
    "\n",
    "* Fix expert rules parsing.\n",
    "* Conditions printed in the order they had been added to the rule.\n",
    "* Fixed bug when using `sklearn.base.clone` function with RuleKit model classes.\n",
    "* Update tutorials in the documentation."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "tutorials_env",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
