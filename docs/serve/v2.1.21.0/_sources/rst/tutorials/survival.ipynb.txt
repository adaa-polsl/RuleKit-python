{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "-Uy-yBGsd9W1"
   },
   "source": [
    "# Survival analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This notebook presents example usage of package for solving survival problem on `bmt` dataset. You can access dataset [here](https://raw.githubusercontent.com/adaa-polsl/RuleKit/master/data/bmt/bmt.arff) \n",
    "\n",
    "This tutorial will cover topics such as:    \n",
    "- training model   \n",
    "- changing model hyperparameters   \n",
    "- hyperparameters tuning   \n",
    "- calculating metrics for model    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Install dependencies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%pip install matplotlib "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "KjtU7PA8eOTr"
   },
   "source": [
    "## Summary of the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Tp1TpfCkd58n"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Recipientgender</th>\n",
       "      <th>Stemcellsource</th>\n",
       "      <th>Donorage</th>\n",
       "      <th>Donorage35</th>\n",
       "      <th>IIIV</th>\n",
       "      <th>Gendermatch</th>\n",
       "      <th>DonorABO</th>\n",
       "      <th>RecipientABO</th>\n",
       "      <th>RecipientRh</th>\n",
       "      <th>ABOmatch</th>\n",
       "      <th>...</th>\n",
       "      <th>extcGvHD</th>\n",
       "      <th>CD34kgx10d6</th>\n",
       "      <th>CD3dCD34</th>\n",
       "      <th>CD3dkgx10d8</th>\n",
       "      <th>Rbodymass</th>\n",
       "      <th>ANCrecovery</th>\n",
       "      <th>PLTrecovery</th>\n",
       "      <th>time_to_aGvHD_III_IV</th>\n",
       "      <th>survival_time</th>\n",
       "      <th>survival_status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>22.830137</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>7.20</td>\n",
       "      <td>1.338760</td>\n",
       "      <td>5.38</td>\n",
       "      <td>35.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>999.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>23.342466</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>4.50</td>\n",
       "      <td>11.078295</td>\n",
       "      <td>0.41</td>\n",
       "      <td>20.6</td>\n",
       "      <td>16.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>1000000.0</td>\n",
       "      <td>163.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>26.394521</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>7.94</td>\n",
       "      <td>19.013230</td>\n",
       "      <td>0.42</td>\n",
       "      <td>23.4</td>\n",
       "      <td>23.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>1000000.0</td>\n",
       "      <td>435.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>39.684932</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>4.25</td>\n",
       "      <td>29.481647</td>\n",
       "      <td>0.14</td>\n",
       "      <td>50.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>33.358904</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>51.85</td>\n",
       "      <td>3.972255</td>\n",
       "      <td>13.05</td>\n",
       "      <td>9.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1000000.0</td>\n",
       "      <td>2043.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>182</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>37.575342</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>11.08</td>\n",
       "      <td>2.522750</td>\n",
       "      <td>4.39</td>\n",
       "      <td>44.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>385.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>183</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>22.895890</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>4.64</td>\n",
       "      <td>1.038858</td>\n",
       "      <td>4.47</td>\n",
       "      <td>44.5</td>\n",
       "      <td>12.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>1000000.0</td>\n",
       "      <td>634.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>184</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>27.347945</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>7.73</td>\n",
       "      <td>1.635559</td>\n",
       "      <td>4.73</td>\n",
       "      <td>33.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>1000000.0</td>\n",
       "      <td>1895.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>185</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>27.780822</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>15.41</td>\n",
       "      <td>8.077770</td>\n",
       "      <td>1.91</td>\n",
       "      <td>24.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>382.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>186</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>55.553425</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>9.91</td>\n",
       "      <td>0.948135</td>\n",
       "      <td>10.45</td>\n",
       "      <td>37.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>1000000.0</td>\n",
       "      <td>1109.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>187 rows × 37 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Recipientgender Stemcellsource   Donorage Donorage35 IIIV Gendermatch  \\\n",
       "0                 1              1  22.830137          0    1           0   \n",
       "1                 1              0  23.342466          0    1           0   \n",
       "2                 1              0  26.394521          0    1           0   \n",
       "3                 0              0  39.684932          1    1           0   \n",
       "4                 0              1  33.358904          0    0           0   \n",
       "..              ...            ...        ...        ...  ...         ...   \n",
       "182               1              1  37.575342          1    1           0   \n",
       "183               0              1  22.895890          0    0           0   \n",
       "184               0              1  27.347945          0    1           0   \n",
       "185               1              1  27.780822          0    1           0   \n",
       "186               1              1  55.553425          1    1           0   \n",
       "\n",
       "    DonorABO RecipientABO RecipientRh ABOmatch  ... extcGvHD CD34kgx10d6  \\\n",
       "0          1            1           1        0  ...        1        7.20   \n",
       "1         -1           -1           1        0  ...        1        4.50   \n",
       "2         -1           -1           1        0  ...        1        7.94   \n",
       "3          1            2           1        1  ...     None        4.25   \n",
       "4          1            2           0        1  ...        1       51.85   \n",
       "..       ...          ...         ...      ...  ...      ...         ...   \n",
       "182        1            1           0        0  ...        1       11.08   \n",
       "183        1            0           1        1  ...        1        4.64   \n",
       "184        1           -1           1        1  ...        1        7.73   \n",
       "185        1            0           1        1  ...        0       15.41   \n",
       "186        1            2           1        1  ...        1        9.91   \n",
       "\n",
       "      CD3dCD34 CD3dkgx10d8 Rbodymass ANCrecovery PLTrecovery  \\\n",
       "0     1.338760        5.38      35.0        19.0        51.0   \n",
       "1    11.078295        0.41      20.6        16.0        37.0   \n",
       "2    19.013230        0.42      23.4        23.0        20.0   \n",
       "3    29.481647        0.14      50.0        23.0        29.0   \n",
       "4     3.972255       13.05       9.0        14.0        14.0   \n",
       "..         ...         ...       ...         ...         ...   \n",
       "182   2.522750        4.39      44.0        15.0        22.0   \n",
       "183   1.038858        4.47      44.5        12.0        30.0   \n",
       "184   1.635559        4.73      33.0        16.0        16.0   \n",
       "185   8.077770        1.91      24.0        13.0        14.0   \n",
       "186   0.948135       10.45      37.0        18.0        20.0   \n",
       "\n",
       "    time_to_aGvHD_III_IV survival_time survival_status  \n",
       "0                   32.0         999.0               0  \n",
       "1              1000000.0         163.0               1  \n",
       "2              1000000.0         435.0               1  \n",
       "3                   19.0          53.0               1  \n",
       "4              1000000.0        2043.0               0  \n",
       "..                   ...           ...             ...  \n",
       "182                 16.0         385.0               1  \n",
       "183            1000000.0         634.0               1  \n",
       "184            1000000.0        1895.0               0  \n",
       "185                 54.0         382.0               1  \n",
       "186            1000000.0        1109.0               0  \n",
       "\n",
       "[187 rows x 37 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from rulekit.arff import read_arff\n",
    "\n",
    "DATASET_URL: str = (\n",
    "    'https://raw.githubusercontent.com/'\n",
    "    'adaa-polsl/RuleKit/master/data/bmt/'\n",
    "    'bmt.arff'\n",
    ")\n",
    "data_df: pd.DataFrame = read_arff(DATASET_URL)\n",
    "data_df['survival_status'] = data_df['survival_status'].astype(int).astype(str)\n",
    "data_df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 378
    },
    "id": "y9uVi9SFeZSa",
    "outputId": "6809c06d-5d8c-48a0-9b6d-3c433574f7f7"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset overview:\n",
      "Name: bmt\n",
      "Objects number: 187; Attributes number: 37\n",
      "Basic attribute statistics:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Donorage</th>\n",
       "      <th>Recipientage</th>\n",
       "      <th>CD34kgx10d6</th>\n",
       "      <th>CD3dCD34</th>\n",
       "      <th>CD3dkgx10d8</th>\n",
       "      <th>Rbodymass</th>\n",
       "      <th>ANCrecovery</th>\n",
       "      <th>PLTrecovery</th>\n",
       "      <th>time_to_aGvHD_III_IV</th>\n",
       "      <th>survival_time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>187.000000</td>\n",
       "      <td>187.000000</td>\n",
       "      <td>187.000000</td>\n",
       "      <td>182.000000</td>\n",
       "      <td>182.000000</td>\n",
       "      <td>185.000000</td>\n",
       "      <td>187.000000</td>\n",
       "      <td>187.000000</td>\n",
       "      <td>187.000000</td>\n",
       "      <td>187.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>33.472068</td>\n",
       "      <td>9.931551</td>\n",
       "      <td>11.891781</td>\n",
       "      <td>5.385096</td>\n",
       "      <td>4.745714</td>\n",
       "      <td>35.801081</td>\n",
       "      <td>26752.866310</td>\n",
       "      <td>90937.919786</td>\n",
       "      <td>775408.042781</td>\n",
       "      <td>938.743316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>8.271826</td>\n",
       "      <td>5.305639</td>\n",
       "      <td>9.914386</td>\n",
       "      <td>9.598716</td>\n",
       "      <td>3.859128</td>\n",
       "      <td>19.650922</td>\n",
       "      <td>161747.200525</td>\n",
       "      <td>288242.407688</td>\n",
       "      <td>418425.252689</td>\n",
       "      <td>849.589495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>18.646575</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>0.790000</td>\n",
       "      <td>0.204132</td>\n",
       "      <td>0.040000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>27.039726</td>\n",
       "      <td>5.050000</td>\n",
       "      <td>5.350000</td>\n",
       "      <td>1.786683</td>\n",
       "      <td>1.687500</td>\n",
       "      <td>19.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>1000000.000000</td>\n",
       "      <td>168.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>33.550685</td>\n",
       "      <td>9.600000</td>\n",
       "      <td>9.720000</td>\n",
       "      <td>2.734462</td>\n",
       "      <td>4.325000</td>\n",
       "      <td>33.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>1000000.000000</td>\n",
       "      <td>676.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>40.117809</td>\n",
       "      <td>14.050000</td>\n",
       "      <td>15.415000</td>\n",
       "      <td>5.823565</td>\n",
       "      <td>6.785000</td>\n",
       "      <td>50.600000</td>\n",
       "      <td>17.000000</td>\n",
       "      <td>37.000000</td>\n",
       "      <td>1000000.000000</td>\n",
       "      <td>1604.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>55.553425</td>\n",
       "      <td>20.200000</td>\n",
       "      <td>57.780000</td>\n",
       "      <td>99.560970</td>\n",
       "      <td>20.020000</td>\n",
       "      <td>103.400000</td>\n",
       "      <td>1000000.000000</td>\n",
       "      <td>1000000.000000</td>\n",
       "      <td>1000000.000000</td>\n",
       "      <td>3364.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Donorage  Recipientage  CD34kgx10d6    CD3dCD34  CD3dkgx10d8  \\\n",
       "count  187.000000    187.000000   187.000000  182.000000   182.000000   \n",
       "mean    33.472068      9.931551    11.891781    5.385096     4.745714   \n",
       "std      8.271826      5.305639     9.914386    9.598716     3.859128   \n",
       "min     18.646575      0.600000     0.790000    0.204132     0.040000   \n",
       "25%     27.039726      5.050000     5.350000    1.786683     1.687500   \n",
       "50%     33.550685      9.600000     9.720000    2.734462     4.325000   \n",
       "75%     40.117809     14.050000    15.415000    5.823565     6.785000   \n",
       "max     55.553425     20.200000    57.780000   99.560970    20.020000   \n",
       "\n",
       "        Rbodymass     ANCrecovery     PLTrecovery  time_to_aGvHD_III_IV  \\\n",
       "count  185.000000      187.000000      187.000000            187.000000   \n",
       "mean    35.801081    26752.866310    90937.919786         775408.042781   \n",
       "std     19.650922   161747.200525   288242.407688         418425.252689   \n",
       "min      6.000000        9.000000        9.000000             10.000000   \n",
       "25%     19.000000       13.000000       16.000000        1000000.000000   \n",
       "50%     33.000000       15.000000       21.000000        1000000.000000   \n",
       "75%     50.600000       17.000000       37.000000        1000000.000000   \n",
       "max    103.400000  1000000.000000  1000000.000000        1000000.000000   \n",
       "\n",
       "       survival_time  \n",
       "count     187.000000  \n",
       "mean      938.743316  \n",
       "std       849.589495  \n",
       "min         6.000000  \n",
       "25%       168.500000  \n",
       "50%       676.000000  \n",
       "75%      1604.000000  \n",
       "max      3364.000000  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"Dataset overview:\")\n",
    "print(f\"Name: bmt\")\n",
    "print(f\"Objects number: {data_df.shape[0]}; Attributes number: {data_df.shape[1]}\")\n",
    "print(\"Basic attribute statistics:\")\n",
    "data_df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "dattexxGmaqJ"
   },
   "source": [
    "## Helper function for creating ruleset characteristics dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "id": "aLCZkT_SmU4a"
   },
   "outputs": [],
   "source": [
    "def get_ruleset_stats(model) -> pd.DataFrame:\n",
    "    tmp = model.parameters.__dict__\n",
    "    del tmp['_java_object']\n",
    "    return pd.DataFrame.from_records([{**tmp, **model.stats.__dict__}])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "u4wOfecjme_d"
   },
   "source": [
    "## Rule induction on full dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "id": "TrO-LyN2mpiP"
   },
   "outputs": [],
   "source": [
    "X: pd.DataFrame = data_df.drop(['survival_status'], axis=1)\n",
    "y: pd.Series = data_df['survival_status']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "id": "c5tmU4IHnFjw"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>minimum_covered</th>\n",
       "      <th>maximum_uncovered_fraction</th>\n",
       "      <th>ignore_missing</th>\n",
       "      <th>pruning_enabled</th>\n",
       "      <th>max_growing_condition</th>\n",
       "      <th>time_total_s</th>\n",
       "      <th>time_growing_s</th>\n",
       "      <th>time_pruning_s</th>\n",
       "      <th>rules_count</th>\n",
       "      <th>conditions_per_rule</th>\n",
       "      <th>induced_conditions_per_rule</th>\n",
       "      <th>avg_rule_coverage</th>\n",
       "      <th>avg_rule_precision</th>\n",
       "      <th>avg_rule_quality</th>\n",
       "      <th>pvalue</th>\n",
       "      <th>FDR_pvalue</th>\n",
       "      <th>FWER_pvalue</th>\n",
       "      <th>fraction_significant</th>\n",
       "      <th>fraction_FDR_significant</th>\n",
       "      <th>fraction_FWER_significant</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.05</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.771417</td>\n",
       "      <td>0.797513</td>\n",
       "      <td>0.902853</td>\n",
       "      <td>5</td>\n",
       "      <td>3.6</td>\n",
       "      <td>65.2</td>\n",
       "      <td>0.308021</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.999865</td>\n",
       "      <td>0.000135</td>\n",
       "      <td>0.000147</td>\n",
       "      <td>0.000184</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   minimum_covered  maximum_uncovered_fraction  ignore_missing  \\\n",
       "0             0.05                         0.0           False   \n",
       "\n",
       "   pruning_enabled  max_growing_condition  time_total_s  time_growing_s  \\\n",
       "0             True                    0.0      1.771417        0.797513   \n",
       "\n",
       "   time_pruning_s  rules_count  conditions_per_rule  \\\n",
       "0        0.902853            5                  3.6   \n",
       "\n",
       "   induced_conditions_per_rule  avg_rule_coverage  avg_rule_precision  \\\n",
       "0                         65.2           0.308021                 1.0   \n",
       "\n",
       "   avg_rule_quality    pvalue  FDR_pvalue  FWER_pvalue  fraction_significant  \\\n",
       "0          0.999865  0.000135    0.000147     0.000184                   1.0   \n",
       "\n",
       "   fraction_FDR_significant  fraction_FWER_significant  \n",
       "0                       1.0                        1.0  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from rulekit.survival import SurvivalRules\n",
    "from rulekit.rules import RuleSet, SurvivalRule\n",
    "\n",
    "srv = SurvivalRules(survival_time_attr='survival_time')\n",
    "\n",
    "srv.fit(X, y)\n",
    "\n",
    "ruleset: RuleSet[SurvivalRule] = srv.model\n",
    "\n",
    "predictions: np.ndarray = srv.predict(X)\n",
    "\n",
    "\n",
    "ruleset_stats = get_ruleset_stats(ruleset)\n",
    "\n",
    "\n",
    "display(ruleset_stats)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot predicted estimators for the first five examples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x289deb3a180>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "for i in range(5):\n",
    "    plt.step(\n",
    "        predictions[i][\"times\"],\n",
    "        predictions[i][\"probabilities\"],\n",
    "        label=f'Example {i}'\n",
    "    )\n",
    "plt.legend(title='Example index:')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot rules Kaplan-Meier's estimators on top of the training dataset estimator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "r1: IF Donorage = (-inf, 45.16) AND Relapse = {0} AND Recipientage = (-inf, 17.45) THEN \n",
      "r2: IF Donorage = (-inf, 43.63) AND HLAmismatch = {0} AND Relapse = {1} THEN \n",
      "r3: IF PLTrecovery = (-inf, 266) AND time_to_aGvHD_III_IV = <12.50, inf) AND ANCrecovery = <10.50, 19.50) AND Rbodymass = (-inf, 69) AND Donorage = (-inf, 44.06) AND Recipientage = <4.60, inf) AND CD34kgx10d6 = (-inf, 16.98) THEN \n",
      "r4: IF Donorage = <37.16, inf) AND Recipientage = <5.15, inf) AND time_to_aGvHD_III_IV = <23.50, inf) AND CD3dCD34 = <0.90, 73.72) THEN \n",
      "r5: IF Recipientage = <17.85, 18.85) THEN \n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from rulekit.kaplan_meier import KaplanMeierEstimator\n",
    "\n",
    "# plot rules kaplan-meier curves\n",
    "for i, rule in enumerate(ruleset.rules):\n",
    "    rule_label: str = f'r{i + 1}'\n",
    "    rule_km: KaplanMeierEstimator = rule.kaplan_meier_estimator\n",
    "    plt.step(\n",
    "        rule_km.times,\n",
    "        rule_km.probabilities,\n",
    "        label=rule_label\n",
    "    )\n",
    "    print(f'{rule_label}: {rule}')\n",
    "\n",
    "# plot whole dataset kaplan-meier curve\n",
    "train_km: KaplanMeierEstimator = srv.get_train_set_kaplan_meier()\n",
    "plt.step(\n",
    "    train_km.times,\n",
    "    train_km.probabilities,\n",
    "    label='Training set estimator'\n",
    ")\n",
    "\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "GkNBc5iBpwmj"
   },
   "source": [
    "### Rules evaluation on full set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "id": "9UjrC8r-p59d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Integrated Brier Score: 0.19651358709002972\n"
     ]
    }
   ],
   "source": [
    "integrated_brier_score = srv.score(X, y)\n",
    "print(f'Integrated Brier Score: {integrated_brier_score}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "FpoSoaKdqAGQ"
   },
   "source": [
    "## Stratified K-Folds cross-validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "id": "0nNv6a84qTsq"
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import StratifiedKFold\n",
    "from rulekit.exceptions import RuleKitJavaException\n",
    "\n",
    "skf = StratifiedKFold(n_splits=10, shuffle=True, random_state=0)\n",
    "\n",
    "ruleset_stats = pd.DataFrame()\n",
    "survival_metrics = []\n",
    "\n",
    "for train_index, test_index in skf.split(X, y):\n",
    "    X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n",
    "    y_train, y_test = y.iloc[train_index], y.iloc[test_index]\n",
    "\n",
    "    srv = SurvivalRules(\n",
    "        survival_time_attr='survival_time'\n",
    "    )\n",
    "    srv.fit(X_train, y_train)\n",
    "\n",
    "    ruleset = srv.model\n",
    "\n",
    "    ibs: float = srv.score(X_test, y_test)\n",
    "\n",
    "    survival_metrics.append(ibs)\n",
    "    ruleset_stats = pd.concat([ruleset_stats, get_ruleset_stats(ruleset)])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "MfCOH_f3sICm"
   },
   "source": [
    "Ruleset characteristics (average)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "id": "xzbazr51sRd3"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "minimum_covered                 0.050000\n",
       "maximum_uncovered_fraction      0.000000\n",
       "ignore_missing                  0.000000\n",
       "pruning_enabled                 1.000000\n",
       "max_growing_condition           0.000000\n",
       "time_total_s                    0.799019\n",
       "time_growing_s                  0.296248\n",
       "time_pruning_s                  0.477474\n",
       "rules_count                     4.000000\n",
       "conditions_per_rule             2.581667\n",
       "induced_conditions_per_rule    59.825000\n",
       "avg_rule_coverage               0.486613\n",
       "avg_rule_precision              1.000000\n",
       "avg_rule_quality                0.995955\n",
       "pvalue                          0.004045\n",
       "FDR_pvalue                      0.004061\n",
       "FWER_pvalue                     0.004104\n",
       "fraction_significant            0.980000\n",
       "fraction_FDR_significant        0.980000\n",
       "fraction_FWER_significant       0.980000\n",
       "dtype: float64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(ruleset_stats.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "_SmDJho4sVEO"
   },
   "source": [
    "Rules evaluation on dataset (average)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "id": "Co-fNd9nshWB"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Integrated Brier Score: 0.20178456199764142\n"
     ]
    }
   ],
   "source": [
    "print(f'Integrated Brier Score: {np.mean(survival_metrics)}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "d-GdQ-wUtzW9"
   },
   "source": [
    "## Hyperparameters tuning\n",
    "\n",
    "This one gonna take a while..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.model_selection import GridSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def scorer(estimator: SurvivalRules, X: pd.DataFrame, y: pd.Series) -> float:\n",
    "    return -1 * estimator.score(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Integrated Brier Score: -0.21437408819868886 using {'minsupp_new': 3, 'survival_time_attr': 'survival_time'}\n"
     ]
    }
   ],
   "source": [
    "# define models and parameters\n",
    "model = SurvivalRules(survival_time_attr='survival_time')\n",
    "\n",
    "# define grid search\n",
    "grid = {\n",
    "    'survival_time_attr': ['survival_time'],\n",
    "    'minsupp_new': range(1, 10),\n",
    "}\n",
    "\n",
    "cv = StratifiedKFold(n_splits=3)\n",
    "grid_search = GridSearchCV(estimator=model, param_grid=grid, cv=cv, scoring=scorer)\n",
    "grid_result = grid_search.fit(X, y)\n",
    "\n",
    "# summarize results\n",
    "print(\n",
    "    'Best Integrated Brier Score: '\n",
    "    f'{grid_result.best_score_} using {grid_result.best_params_}'\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Building model with tuned hyperparameters\n",
    "\n",
    "### Split dataset to train and test (80%/20%)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=True, stratify=y)\n",
    "\n",
    "srv = SurvivalRules(\n",
    "    survival_time_attr='survival_time',\n",
    "    minsupp_new=5\n",
    ")\n",
    "srv.fit(X_train, y_train)\n",
    "ruleset: RuleSet[SurvivalRule] = srv.model\n",
    "ruleset_stats: pd.DataFrame = get_ruleset_stats(ruleset)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Rules evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "minimum_covered                     5.0\n",
       "maximum_uncovered_fraction          0.0\n",
       "ignore_missing                    False\n",
       "pruning_enabled                    True\n",
       "max_growing_condition               0.0\n",
       "time_total_s                   0.594173\n",
       "time_growing_s                 0.244234\n",
       "time_pruning_s                 0.312523\n",
       "rules_count                           4\n",
       "conditions_per_rule                2.25\n",
       "induced_conditions_per_rule       55.25\n",
       "avg_rule_coverage              0.389262\n",
       "avg_rule_precision                  1.0\n",
       "avg_rule_quality                    1.0\n",
       "pvalue                              0.0\n",
       "FDR_pvalue                          0.0\n",
       "FWER_pvalue                         0.0\n",
       "fraction_significant                1.0\n",
       "fraction_FDR_significant            1.0\n",
       "fraction_FWER_significant           1.0\n",
       "Name: 0, dtype: object"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(ruleset_stats.iloc[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Validate model on test dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Integrated Brier Score: 0.14054870564224475\n"
     ]
    }
   ],
   "source": [
    "integrated_brier_score = srv.score(X_test, y_test)\n",
    "print(f'Integrated Brier Score: {integrated_brier_score}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "predictions = srv.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Predicted Kaplan-Meier curves for 5 examples from test set')"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for i in range(5):\n",
    "    plt.step(\n",
    "        predictions[i][\"times\"], \n",
    "        predictions[i][\"probabilities\"],\n",
    "        label=f'Example {i}'\n",
    "    )\n",
    "plt.legend(title='Examples indices:')\n",
    "plt.title('Predicted Kaplan-Meier curves for 5 examples from test set')"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "Raport_przezyciowy.ipynb",
   "provenance": [],
   "toc_visible": true
  },
  "kernelspec": {
   "display_name": "tutorials_env",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.0"
  },
  "metadata": {
   "interpreter": {
    "hash": "62266c16fff41e971c13e9cb2ad3d47e4ef45d0678714c255381eb9fdcbd7032"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
