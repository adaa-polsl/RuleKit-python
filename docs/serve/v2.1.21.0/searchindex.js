Search.setIndex({"docnames": ["index", "rst/autodoc", "rst/autodoc/classification", "rst/autodoc/params", "rst/autodoc/regression", "rst/autodoc/rules", "rst/autodoc/stats", "rst/autodoc/survival", "rst/quick_start", "rst/tutorials", "rst/tutorials/classification", "rst/tutorials/expert_rules", "rst/tutorials/regression", "rst/tutorials/survival", "rst/whats_new", "rst/whats_new/Changes in this version"], "filenames": ["index.rst", "rst/autodoc.rst", "rst/autodoc/classification.rst", "rst/autodoc/params.rst", "rst/autodoc/regression.rst", "rst/autodoc/rules.rst", "rst/autodoc/stats.rst", "rst/autodoc/survival.rst", "rst/quick_start.rst", "rst/tutorials.rst", "rst/tutorials/classification.ipynb", "rst/tutorials/expert_rules.ipynb", "rst/tutorials/regression.ipynb", "rst/tutorials/survival.ipynb", "rst/whats_new.rst", "rst/whats_new/Changes in this version.ipynb"], "titles": ["RuleKit", "Code documentation", "Classification", "Parameters", "Regression", "Rules", "Statistics", "Survival", "Quick start", "Tutorials", "Classification", "Expert Rules", "Regression", "Survival analysis", "What\u2019s new", "What\u2019s new in RuleKit version 2.1.21.0?"], "terms": {"thi": [0, 1, 2, 4, 7, 8, 10, 11, 12, 13, 15], "packag": [0, 1, 10, 12, 13, 15], "i": [0, 1, 2, 4, 6, 7, 8, 11, 12, 13, 15], "python": [0, 1, 15], "wrapper": [0, 1, 8, 15], "librari": [0, 8, 15], "versatil": 0, "tool": 0, "rule": [0, 1, 2, 3, 4, 6, 7, 9], "learn": [0, 2, 4, 7, 8, 15], "base": [0, 3, 4, 15], "sequenti": 0, "cover": [0, 2, 4, 5, 6, 7, 10, 12, 13], "induct": [0, 1, 2, 3, 4, 5, 7], "algorithm": [0, 11], "suitabl": 0, "classif": [0, 1, 4, 7, 8, 9], "regress": [0, 1, 9], "surviv": [0, 1, 9], "problem": [0, 2, 4, 7, 10, 11, 12, 13, 15], "aim": 0, "give": [0, 15], "an": [0, 2, 11, 15], "easi": [0, 15], "wai": [0, 15], "integr": [0, 7, 13], "function": [0, 7, 15], "project": 0, "notebook": [0, 10, 11, 12, 13], "all": [0, 2, 5, 7, 15], "model": [0, 2, 3, 4, 7, 8, 11, 15], "ar": [0, 2, 4, 5, 7, 8, 15], "writen": 0, "compat": [0, 2, 4, 7], "scikit": [0, 2, 4, 7, 8], "quick": 0, "start": [0, 1], "what": 0, "new": [0, 2, 4, 7], "tutori": [0, 8, 10, 11, 12, 13, 15], "code": 0, "document": [0, 15], "contain": [1, 2, 3, 4, 5, 6, 7], "class": [1, 2, 3, 4, 5, 6, 7, 11, 15], "initi": [1, 2, 4, 7, 11], "rulekit": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13], "java": [1, 8, 15], "backend": 1, "main": 1, "us": [1, 2, 3, 4, 5, 7, 8, 10, 13], "It": [1, 8, 15], "jvm": 1, "underhood": 1, "setup": 1, "jar": 1, "sinc": [1, 15], "version": [1, 8, 12], "1": [1, 2, 4, 7, 10, 11, 12, 13, 14], "7": [1, 10, 11, 12, 13], "0": [1, 2, 4, 6, 7, 10, 11, 12, 13, 14], "need": 1, "manual": 1, "you": [1, 3, 8, 10, 11, 12, 13, 15], "mai": [1, 2, 4, 7, 8], "just": [1, 2], "skip": 1, "init": 1, "line": 1, "howev": 1, "certain": [1, 2, 4, 7], "scenario": 1, "when": [1, 2, 7, 15], "want": [1, 15], "custom": [1, 15], "file": 1, "modifi": 1, "vm": 1, "paramet": [1, 2, 4, 5, 7, 8, 10, 12, 13], "can": [1, 2, 3, 4, 7, 8, 10, 12, 13, 15], "equal": [1, 10], "type": [1, 2, 3, 4, 5, 6, 7], "str": [1, 2, 4, 5, 7, 10, 11, 12, 13, 15], "static": 1, "configure_java_logg": 1, "log_file_path": 1, "verbosity_level": 1, "int": [1, 2, 4, 6, 7, 10, 11, 13], "enabl": [1, 2, 4, 7], "debug": 1, "log": 1, "probabl": [1, 2, 7, 13, 15], "don": [1, 8], "t": [1, 2, 4, 7, 8], "method": [1, 2, 15], "unless": 1, "too": 1, "deep": [1, 2, 4, 7], "dive": 1, "process": [1, 15], "your": [1, 8, 15], "re": 1, "some": [1, 2, 15], "issu": 1, "path": [1, 15], "where": [1, 2, 4, 7], "store": 1, "option": [1, 2], "verbos": 1, "level": [1, 5, 6], "minimum": [1, 2, 4, 7], "valu": [1, 2, 3, 4, 5, 6, 7, 10, 15], "maximum": [1, 2, 4, 7], "2": [1, 2, 4, 10, 11, 12, 13], "default": [1, 2, 4, 6, 7], "get_java_logger_config": 1, "_rulekitjavaloggerconfig": 1, "none": [1, 2, 4, 7, 13], "return": [1, 2, 4, 5, 7, 10, 12, 13, 15], "logger": 1, "configur": 1, "initial_heap_s": 1, "max_heap_s": 1, "rulekit_jar_file_path": 1, "load": 1, "have": [1, 8, 15], "call": [1, 8], "befor": [1, 15], "ani": [1, 2, 4, 7, 11, 15], "oper": [1, 2, 3, 4, 7, 15], "heap": 1, "size": [1, 10], "mb": 1, "max": [1, 10, 12, 13], "note": [1, 2, 15], "own": 1, "otherwis": [1, 2], "leav": 1, "offici": 1, "releas": [1, 15], "rais": [1, 2, 4, 7], "except": [1, 11, 13], "If": [1, 2, 4, 7, 8], "fail": 1, "statist": [1, 5, 10, 12, 13], "ruleclassifi": [2, 4, 7, 8, 10, 11, 15], "minsupp_new": [2, 4, 7, 10, 11, 12, 13], "float": [2, 4, 5, 6, 7, 10, 13, 15], "05": [2, 4, 6, 7, 10, 11, 12, 13], "induction_measur": [2, 4, 5, 10, 12, 15], "measur": [2, 3, 4, 5], "correl": [2, 3, 4], "pruning_measur": [2, 4, 5, 10, 12, 15], "voting_measur": [2, 4, 5, 10, 12, 15], "max_grow": [2, 4, 7, 11], "enable_prun": [2, 4, 7], "bool": [2, 4, 5, 7], "true": [2, 4, 7, 8, 10, 11, 12, 13], "ignore_miss": [2, 4, 7, 12, 13], "fals": [2, 4, 5, 6, 7, 10, 11, 12, 13], "max_uncovered_fract": [2, 4, 7], "select_best_candid": [2, 4, 7], "complementary_condit": [2, 4, 7], "control_apriori_precis": 2, "max_rule_count": [2, 4, 7], "approximate_induct": 2, "approximate_bins_count": 2, "100": 2, "5": [2, 4, 7, 10, 11, 12, 13, 15], "number": [2, 4, 5, 6, 7, 12, 13], "fraction": [2, 4, 5, 6, 7], "previous": [2, 4, 7], "uncov": [2, 4, 7], "exampl": [2, 4, 7, 8, 10, 11, 12, 15], "posit": [2, 4, 5, 6, 7, 10], "param": [2, 3, 4, 10, 12, 15], "dure": [2, 3, 4, 5], "union": [2, 3, 4, 5, 7], "prune": [2, 3, 4, 5, 6, 7], "could": [2, 4, 7], "user": [2, 4, 10, 11, 12], "defin": [2, 4, 10, 12, 13], "string": [2, 4, 7], "p": [2, 4, 5, 6, 15], "n": [2, 4, 6, 10, 15], "vote": [2, 3, 4, 5, 10], "non": [2, 4, 7], "neg": [2, 4, 5, 6, 7, 10], "integ": [2, 4, 7], "repres": [2, 4, 5, 7, 15], "condit": [2, 4, 5, 6, 7, 15], "which": [2, 4, 7, 11, 15], "ad": [2, 4, 7, 15], "grow": [2, 4, 5, 6, 7, 15], "phase": [2, 4, 7], "larg": [2, 4, 7], "dataset": [2, 4, 7, 8, 15], "execut": [2, 4, 7], "time": [2, 4, 5, 6, 7, 13, 15], "prohibit": [2, 4, 7], "indic": [2, 4, 5, 7, 13], "limit": [2, 4, 7], "disabl": [2, 4, 7], "boolean": [2, 4, 7], "tell": [2, 4, 7], "whether": [2, 4, 5, 7], "miss": [2, 4, 7], "should": [2, 4, 7, 8], "ignor": [2, 4, 7], "given": [2, 4, 7], "attribut": [2, 4, 7, 11, 12, 13, 15], "alwai": [2, 4, 7], "cconsid": 2, "fulfil": [2, 4, 7], "build": [2, 4, 7], "upon": [2, 4, 7], "point": [2, 4, 7], "from": [2, 4, 7, 8, 10, 11, 13], "interv": [2, 4, 7], "remain": [2, 4, 7], "set": [2, 4, 5, 6, 7, 8, 11, 15], "flag": [2, 4, 7], "determin": [2, 4, 7], "best": [2, 4, 7, 10, 12, 13], "candid": [2, 4, 7], "select": [2, 4, 7], "complementari": [2, 4, 7], "form": [2, 4, 7], "nomin": [2, 4, 7], "support": [2, 4, 7, 8], "induc": [2, 4, 5, 6, 7], "verifi": 2, "precis": [2, 3, 5, 6, 10], "higher": 2, "than": 2, "apriori": 2, "investig": 2, "gener": [2, 4, 7, 15], "data": [2, 3, 4, 7, 8, 10, 11, 12, 13, 15], "appli": [2, 4, 7], "singl": [2, 4, 5, 6, 7, 15], "approxim": 2, "heurist": 2, "doe": 2, "check": [2, 8], "possibl": [2, 15], "split": 2, "experiment": 2, "featur": [2, 15], "current": 2, "work": 2, "onli": 2, "result": [2, 4, 7, 10, 12, 13], "chang": [2, 10, 12, 13], "futur": [2, 15], "bin": 2, "evalu": [2, 3, 10], "add_event_listen": [2, 4, 7], "listen": [2, 4, 7], "ruleinductionprogresslisten": [2, 4, 7], "add": [2, 4, 7], "event": [2, 4, 7], "object": [2, 4, 5, 7, 12, 13, 15], "allow": [2, 4, 7, 11], "monitor": [2, 4, 7], "progress": [2, 4, 7], "import": [2, 4, 7, 8, 10, 11, 12, 13, 15], "myeventlisten": [2, 4, 7], "def": [2, 4, 7, 10, 12, 13, 15], "on_new_rul": [2, 4, 7], "self": [2, 4, 7], "print": [2, 4, 5, 7, 8, 10, 11, 12, 13, 15], "do": [2, 4, 7, 15], "someth": [2, 4, 7], "fit": [2, 4, 7, 8, 10, 11, 12, 13, 15], "ndarrai": [2, 3, 4, 7, 10, 12, 13], "datafram": [2, 3, 4, 7, 10, 11, 12, 15], "list": [2, 3, 4, 5, 7, 11, 15], "label": [2, 4, 7, 10, 13, 15], "train": [2, 4, 5, 6, 7, 8, 11, 15], "get_coverage_matrix": [2, 4, 7], "calcul": [2, 4, 7, 13], "coverag": [2, 3, 4, 5, 6, 7], "matrix": [2, 4, 7, 10], "ruleset": [2, 4, 5, 6, 7, 10, 11, 12, 15], "coverage_matrix": [2, 4, 7], "each": [2, 3, 4, 7, 11], "row": [2, 4, 7, 10, 11, 13], "everi": [2, 4, 7], "column": [2, 4, 7, 10, 11, 13], "cell": [2, 4, 7], "mean": [2, 4, 7, 8, 10, 12, 13], "doesn": [2, 4, 7], "np": [2, 4, 7, 10, 12, 13], "get_metadata_rout": [2, 4, 7], "metadata": [2, 4, 7], "rout": [2, 4, 7], "yet": [2, 4, 7], "notimplementederror": [2, 4, 7], "_description_": [2, 4, 7], "get_param": [2, 4, 7], "dict": [2, 4, 5, 7, 10], "Not": [2, 4, 7], "hyperparamet": [2, 4, 7], "dictionari": [2, 4, 5, 7, 10, 12, 15], "predict": [2, 4, 7, 8, 10, 15], "return_metr": [2, 10], "tupl": [2, 4, 7, 10, 11], "classificationpredictionmetr": 2, "perform": [2, 4, 7], "addit": [2, 11, 15], "metric": [2, 6, 8, 13], "instead": [2, 4], "wasn": 2, "first": [2, 4, 7, 15], "element": [2, 4, 7], "being": 2, "second": [2, 4, 5, 6, 7, 15], "one": [2, 4, 7, 10, 12, 13, 15], "predict_proba": 2, "score": [2, 4, 7, 10, 12, 13], "accuraci": [2, 3, 8, 10], "test": [2, 7], "wrt": [2, 4, 7], "set_param": [2, 4, 7], "kwarg": [2, 4, 7], "same": [2, 4, 7, 8, 15], "constructor": [2, 4, 7], "expertruleclassifi": [2, 11], "extend_using_pref": [2, 4, 7, 11], "extend_using_automat": [2, 4, 7, 11], "induce_using_pref": [2, 4, 7, 11], "induce_using_automat": [2, 4, 7, 11], "consider_other_class": 2, "preferred_conditions_per_rul": [2, 4, 7], "2147483647": [2, 4, 7], "preferred_attributes_per_rul": [2, 4, 7], "expert": [2, 4, 7, 9], "knowledg": 2, "consid": [2, 4, 7], "extend": [2, 4, 7], "prefer": [2, 4, 7, 11, 15], "automat": [2, 4, 7], "": [2, 10, 12], "ha": [2, 11, 15], "been": [2, 15], "per": [2, 4, 6, 7, 10], "unlimit": [2, 4, 7], "expert_rul": [2, 4, 7, 11, 15], "expert_preferred_condit": [2, 4, 7, 11, 15], "expert_forbidden_condit": [2, 4, 7, 11, 15], "either": [2, 4, 7], "pass": [2, 4, 7], "name": [2, 4, 7, 12, 13], "multiset": [2, 4, 7], "also": [2, 4, 7, 15], "specifi": [2, 4, 7], "special": [2, 4, 7], "forbidden": [2, 4, 7, 11, 15], "valy": [2, 4, 7], "alia": 3, "numpi": [3, 10, 12, 13], "panda": [3, 7, 10, 11, 12, 13, 15], "core": 3, "frame": 3, "constant": 3, "specyf": 3, "enum": 3, "differ": [3, 7], "ream": 3, "more": [3, 8, 15], "about": [3, 5, 7, 15], "its": [3, 8, 15], "implement": [3, 8, 15], "41": [3, 10, 11, 12, 13], "qualiti": [3, 5, 6], "_": 3, "here": [3, 10, 12, 13, 15], "http": [3, 10, 11, 12, 13], "github": 3, "com": [3, 10, 11, 12, 13, 15], "adaa": [3, 10, 11, 12, 13, 15], "polsl": [3, 10, 11, 12, 13, 15], "wiki": 3, "4": [3, 10, 11, 12, 13], "binaryentropi": 3, "c1": 3, "c2": 3, "cfoil": 3, "cn2significnc": 3, "fbayesianconfirm": 3, "fmeasur": 3, "fullcoverag": [3, 15], "georss": 3, "gmeasur": 3, "informationgain": 3, "jmeasur": 3, "kappa": [3, 10], "klosgen": 3, "laplac": 3, "lift": [3, 10], "logicalsuffici": 3, "mestim": 3, "mutualsupport": 3, "novelti": 3, "oddsratio": 3, "onewaysupport": 3, "pawlakdependencyfactor": 3, "q2": 3, "relativerisk": 3, "ripper": 3, "ruleinterest": 3, "rss": 3, "sbayesian": 3, "sensit": [3, 10], "specif": [3, 10], "twowaysupport": 3, "weightedlaplac": [3, 10], "weightedrelativeaccuraci": 3, "yail": 3, "logrank": 3, "ruleregressor": [4, 12, 15], "mean_based_regress": [4, 11, 12], "fast": 4, "median": 4, "target": [4, 8], "coeffici": 4, "r2": [4, 13], "expertruleregressor": [4, 11], "inductionparamet": 5, "java_object": 5, "properti": 5, "get_covering_inform": 5, "inform": [5, 15], "covering_data": 5, "print_stat": 5, "format": 5, "text": [5, 13], "pvalu": [5, 6, 10, 12, 13], "signific": [5, 6], "stat": [5, 6, 10, 12, 13], "rulestatist": [5, 6], "weight": [5, 6], "weighted_n": 5, "account": [5, 6], "weighted_p": 5, "calculate_avg_rule_coverag": 5, "count": [5, 10, 12, 13], "averag": [5, 6, 10, 13], "calculate_avg_rule_precis": 5, "calculate_avg_rule_qu": 5, "calculate_conditions_count": 5, "calculate_induced_conditions_count": 5, "calculate_signific": 5, "alpha": 5, "calculate_significance_fdr": 5, "discoveri": [5, 6], "rate": [5, 6], "correct": [5, 6], "two": 5, "field": [5, 15], "assum": [5, 6], "calculate_significance_fw": 5, "familii": [5, 6], "wise": [5, 6], "error": [5, 6, 7, 8, 12], "growing_tim": 5, "is_vot": 5, "pruning_tim": 5, "rulesetstatist": [5, 6], "total_tim": 5, "construct": [5, 6], "describ": [6, 10, 12, 13], "significance_level": 6, "time_total_": [6, 10, 12, 13], "time_growing_": [6, 10, 12, 13], "time_pruning_": [6, 10, 12, 13], "rules_count": [6, 10, 12, 13], "conditions_per_rul": [6, 10, 12, 13], "induced_conditions_per_rul": [6, 10, 12, 13], "avg_rule_coverag": [6, 10, 12, 13], "avg_rule_precis": [6, 10, 12, 13], "avg_rule_qu": [6, 10, 12, 13], "fdr_pvalu": [6, 10, 12, 13], "fwer_pvalu": [6, 10, 12, 13], "fraction_signific": [6, 10, 12, 13], "fraction_fdr_signific": [6, 10, 12, 13], "fraction_fwer_signific": [6, 10, 12, 13], "survivalrul": [7, 11, 13, 15], "survival_time_attr": [7, 11, 13, 15], "padna": 7, "survival_tim": [7, 11, 13, 15], "statu": 7, "omit": 7, "wa": [7, 8, 15], "estim": [7, 10, 12, 15], "correspond": 7, "brier": [7, 13], "ib": [7, 13], "b": [7, 11], "squar": [7, 12], "between": 7, "summar": [7, 10, 12, 13], "over": 7, "observ": 7, "expertsurvivalrul": [7, 11], "requir": 8, "develop": 8, "kit": 8, "8": [8, 10, 11, 12, 13, 15], "later": 8, "comput": 8, "both": 8, "open": 8, "jdk": 8, "oracl": 8, "quickli": 8, "up": 8, "pip": [8, 10, 13], "11": [8, 10, 11, 12, 13], "jre": 8, "To": [8, 12], "everyth": [8, 15], "correctli": 8, "__version__": 8, "run": 8, "without": 8, "now": [8, 15], "we": 8, "final": [8, 15], "readi": 8, "sklearn": [8, 10, 12, 13, 15], "iri": [8, 15], "load_iri": 8, "x": [8, 10, 11, 13, 15], "y": [8, 10, 11, 13, 15], "classifi": 8, "accuracy_scor": [8, 10], "As": [8, 15], "notic": 8, "easili": [8, 15], "cross": 8, "valid": 8, "hyper": 8, "tune": 8, "etc": 8, "For": 8, "head": [8, 10, 11, 15], "section": 8, "present": [10, 11, 12, 13], "usag": [10, 11, 12, 13], "solv": [10, 12, 13], "seismic": [10, 11, 15], "bump": [10, 11, 15], "access": [10, 13, 15], "topic": [10, 12, 13], "get": [10, 12], "inbuilt": [10, 12], "matplotlib": [10, 13, 15], "pd": [10, 11, 12, 13, 15], "arff": [10, 11, 12, 13], "read_arff": [10, 11, 12, 13, 15], "dataset_url": [10, 13, 15], "raw": [10, 11, 12, 13, 15], "githubusercont": [10, 11, 12, 13, 15], "ref": [10, 11, 15], "master": [10, 11, 12, 13, 15], "df_full": 10, "astyp": [10, 11, 13], "genergi": [10, 11], "gimpul": [10, 11], "goenergi": [10, 11], "goimpul": [10, 11], "nbump": [10, 11], "nbumps2": [10, 11], "nbumps3": [10, 11], "nbumps4": [10, 11], "nbumps5": [10, 11], "nbumps6": 10, "nbumps7": 10, "nbumps89": 10, "senergi": [10, 11], "maxenergi": [10, 11], "584000e": 10, "03": [10, 11], "2584": 10, "000000": [10, 12, 13], "9": [10, 11, 12, 13, 15], "024252e": 10, "04": 10, "538": [10, 11], "579334": 10, "12": [10, 11, 12, 13], "375774": 10, "508901": 10, "859520": 10, "393576": 10, "392802": 10, "067724": 10, "004644": 10, "4975": 10, "270898": 10, "4278": 10, "850619": 10, "065789": 10, "std": [10, 12, 13], "292005e": 10, "562": 10, "652536": 10, "319051": 10, "63": [10, 13], "166556": 10, "364616": 10, "783772": 10, "769710": 10, "279059": 10, "068001": 10, "20450": 10, "833222": 10, "19357": 10, "454882": 10, "247962": 10, "min": [10, 12, 13], "000000e": 10, "02": [10, 12], "96": [10, 11, 12], "25": [10, 11, 12, 13], "166000e": 10, "190": 10, "37": [10, 11, 12, 13], "36": [10, 11, 12], "50": [10, 11, 12, 13], "548500e": 10, "379": 10, "6": [10, 11, 12, 13], "75": [10, 11, 12, 13], "283250e": 10, "669": 10, "38": [10, 11, 12, 13], "30": [10, 11, 12, 13], "250000": 10, "2600": 10, "2000": 10, "595650e": 10, "06": [10, 12, 13], "4518": 10, "1245": 10, "838": 10, "3": [10, 11, 12, 13], "402000": 10, "400000": [10, 12, 13], "pyplot": [10, 13, 15], "plt": [10, 13, 15], "group": 10, "value_count": 10, "e": [10, 11], "index": [10, 12, 13], "fig1": 10, "ax1": 10, "subplot": 10, "pie": 10, "autopct": 10, "1f": 10, "shadow": 10, "startangl": 10, "90": [10, 12, 13], "axi": [10, 11, 12, 13, 15], "show": [10, 11, 13], "math": [10, 12], "drop": [10, 11, 12, 13, 15], "seri": [10, 12, 13], "get_prediction_metr": 10, "y_pred": [10, 12], "y_true": [10, 12], "classification_metr": 10, "confusion_matrix": 10, "tn": 10, "fp": 10, "fn": 10, "tp": 10, "ravel": 10, "npv": 10, "ppv": 10, "mae": 10, "mean_absolute_error": [10, 12], "cohen_kappa_scor": 10, "balanc": 10, "balanced_accuracy_scor": 10, "logist": 10, "loss": 10, "log_loss": 10, "psep": 10, "fall": 10, "out": 10, "youden": 10, "j": 10, "f": [10, 12, 13], "fowlk": 10, "mallow": 10, "fowlkes_mallows_scor": 10, "rules_per_exampl": 10, "conflict": 10, "voting_conflict": 10, "geometr": 10, "sqrt": [10, 12], "from_record": [10, 12, 13], "get_ruleset_stat": [10, 12, 13], "__dict__": [10, 12, 13], "classificationrul": [10, 11, 15], "ipython": 10, "displai": [10, 12, 13], "clf": [10, 11, 15], "c2_ruleset": [10, 12], "prediction_metr": 10, "c2_confusion_matrix": 10, "model_stat": 10, "corr_ruleset": [10, 12], "tmp": [10, 12, 13], "corr_confusion_matrix": 10, "concat": [10, 12, 13], "rss_ruleset": [10, 12], "rss_confusion_matrix": 10, "confus": 10, "218550": 10, "036229": 10, "111458": 10, "35": [10, 11, 12, 13], "742857": 10, "22": [10, 11, 12, 13], "142857": 10, "259410": 10, "670793": 10, "322125": 10, "005729": 10, "005879": 10, "010640": 10, "971429": 10, "885714": 10, "471475": 10, "339709": 10, "123223": 10, "21": [10, 11, 12, 13], "51": [10, 11, 12, 13], "666667": 10, "306612": 10, "469157": 10, "201772": 10, "016841": 10, "017345": 10, "026655": 10, "904762": 10, "857143": 10, "514044": 10, "327209": 10, "171176": 10, "14": [10, 11, 12, 13, 15], "714286": [10, 12], "64": [10, 11, 13], "428571": 10, "473795": 10, "484564": 10, "253249": 10, "041892": 10, "044068": 10, "068063": 10, "785714": 10, "932663": 10, "067337": 10, "433613": 10, "709693": 10, "427088": 10, "452941": 10, "966446": 10, "961665": 10, "487342": 10, "407595": 10, "469512": 10, "928703": 10, "81": 10, "93": [10, 11, 12], "77": [10, 11, 12], "2333": 10, "079334": 10, "2146": 10, "661622": 10, "827399": 10, "172601": 10, "246689": 10, "729909": 10, "221157": 10, "617647": 10, "842171": 10, "969018": 10, "216049": 10, "283951": 10, "320122": 10, "823757": 10, "381": 10, "65": [10, 11, 12, 13], "105": 10, "2033": 10, "438854": 10, "1993": 10, "721224": 10, "788313": 10, "211687": 10, "207458": 10, "725394": 10, "629984": 10, "652941": 10, "797846": 10, "970277": 10, "185309": 10, "816694": 10, "288687": 10, "789800": 10, "488": 10, "59": [10, 11, 12, 13], "111": 10, "1926": 10, "633127": 10, "2085": 10, "721766": 10, "23": [10, 11, 12, 13], "IF": [10, 11, 12, 13, 15], "inf": [10, 11, 12, 13, 15], "32": [10, 11, 12, 13], "THEN": [10, 11, 12, 13, 15], "AND": [10, 11, 12, 13, 15], "lt": [10, 11, 12, 13, 15], "84": [10, 11], "13675": 10, "17640": 10, "1625": 10, "3500": 10, "772": 10, "shift": [10, 11], "73": [10, 13], "6150": 10, "1865": 10, "230": 10, "550": [10, 11], "380": 10, "118": 10, "31790": 10, "114": 10, "87": [10, 11, 12], "1342": [10, 11], "233": 10, "28515": 10, "1210": 10, "72": [10, 12, 13], "12550": 10, "514": 10, "1832": 10, "312": [10, 11], "88": [10, 12], "748755": 10, "95": [10, 11, 12], "55000": 10, "3096": 10, "364": 10, "1459": 10, "10150": 10, "2208": 10, "513615": 10, "1005720": 10, "1328": 10, "29": [10, 12, 13], "31": [10, 12], "2109": 10, "350": [10, 11], "36350": 10, "159155": 10, "586025": 10, "1408": 10, "1959": [10, 11], "13": [10, 13], "54950": 10, "750": [10, 11], "38250": 10, "254130": 10, "1133675": 10, "16": [10, 12, 13], "1438": 10, "203": 10, "4300": 10, "131700": 10, "740": 10, "38935": 10, "127440": 10, "14750": 10, "68": [10, 11], "1742": 10, "31100": 10, "211170": 10, "123": 10, "19": [10, 11, 12, 13], "1139": [10, 11], "46": [10, 11, 12], "116": 10, "46580": 10, "1877915": 10, "183": [10, 13], "w": [10, 11], "521": [10, 11], "2344": 10, "34605": 10, "656965": 10, "137": 10, "39": [10, 11, 12, 13], "450": [10, 11], "18870": [10, 11], "160": 10, "62": 10, "1603": 10, "131": [10, 11], "70": [10, 11, 12], "119": 10, "614380": 10, "25000": 10, "2250": 10, "186": [10, 11, 13], "12415": 10, "129940": 10, "121": 10, "793": 10, "150": 10, "1350": 10, "ghazard": [10, 11], "53": [10, 11, 12, 13], "42215": 10, "94300": 10, "133": 10, "813": 10, "74": [10, 11], "11100": 10, "537": [10, 11], "796": [10, 11], "17635": 10, "36470": 10, "18800": 10, "52205": 10, "28": [10, 12], "181": [10, 11], "524": 10, "184": [10, 13], "55": [10, 11, 12, 13], "128": 10, "7265": 10, "60": [10, 11, 12, 13], "31350": 10, "1510": [10, 11], "89": [10, 11, 12], "124": 10, "1252": [10, 11], "1331": [10, 11], "1253": [10, 11], "1500": [10, 11], "36050": [10, 11], "34": [10, 11, 12], "662435": [10, 11], "994": 10, "61250": [10, 11], "712": 10, "2257": 10, "58310": [10, 11], "934630": [10, 11], "40650": [10, 11], "2374": 10, "799855": [10, 11], "650": 10, "71": [10, 11, 12], "58": [10, 12], "34360": [10, 11], "306": 10, "28325": 10, "153": [10, 11], "321": 10, "14295": 10, "36250": 10, "40500": [10, 11], "96260": [10, 11], "1062020": [10, 11], "850": [10, 11], "7500": [10, 11], "1404": 10, "2965": [10, 11], "69": [10, 13], "1789250": 10, "95850": 10, "10495": 10, "126": 10, "78": [10, 11, 12], "250": [10, 11], "43150": 10, "176": [10, 11], "31760": 10, "49585": [10, 11], "362": 10, "771": 10, "27": [10, 11, 12, 13], "20485": 10, "43280": 10, "142": 10, "177": [10, 12], "241": 10, "54": [10, 11, 12, 13], "4905": 10, "seismoacoust": [10, 11], "126350": 10, "2168": 10, "44750": 10, "725": 10, "117": 10, "57680": 10, "34315": 10, "396": [10, 11], "1445": [10, 11], "26200": 10, "78890": 10, "297": 10, "1850": 10, "18585": 10, "25305": 10, "240": [10, 11], "588": 10, "42": [10, 11, 12, 13], "45": [10, 11, 12, 13], "92850": 10, "model_select": [10, 12, 13], "stratifiedkfold": [10, 13], "n_split": [10, 12, 13], "10": [10, 11, 12, 13, 15], "skf": [10, 13], "c2_ruleset_stat": 10, "c2_prediction_metr": 10, "arrai": [10, 15], "train_index": [10, 13], "test_index": [10, 13], "x_train": [10, 12, 13], "x_test": [10, 12, 13], "iloc": [10, 12, 13], "y_train": [10, 12, 13], "y_test": [10, 12, 13], "c": [10, 12], "cezar": [10, 12], "appdata": 10, "local": 10, "temp": 10, "ipykernel_13196": 10, "4002598548": 10, "py": [10, 12], "runtimewarn": 10, "invalid": 10, "encount": 10, "scalar": 10, "divid": 10, "characterist": 10, "292132": 10, "227262": 10, "047455": 10, "200000": [10, 12, 13], "720378": 10, "124536": 10, "239541": 10, "690010": 10, "337021": 10, "014757": 10, "015234": 10, "030014": 10, "909792": 10, "872710": 10, "dtype": [10, 12, 13], "float64": [10, 12, 13], "855063": 10, "144937": 10, "107556": 10, "567020": 10, "224070": 10, "235294": 10, "898747": 10, "945594": 10, "495355": 10, "443788": 10, "101253": 10, "134041": 10, "520255": 10, "145015": 10, "870605": 10, "24": [10, 11, 12, 13], "500000": [10, 12, 13], "216": 10, "900000": [10, 12], "871479": 10, "179": 10, "344832": 10, "gonna": [10, 12, 13], "take": [10, 12, 13], "while": [10, 12, 13], "18": [10, 11, 12, 13, 14], "gridsearchcv": [10, 12, 13], "rang": [10, 12, 13], "15": [10, 12, 13], "measures_choic": [10, 12], "grid": [10, 12, 13], "search": [10, 12, 13], "cv": [10, 12, 13], "grid_search": [10, 12, 13], "param_grid": [10, 12, 13], "balanced_accuraci": 10, "n_job": 10, "grid_result": [10, 12, 13], "bac": 10, "best_score_": [10, 12, 13], "best_params_": [10, 12, 13], "626780": 10, "gt": [10, 12, 13, 15], "train_test_split": [10, 13], "test_siz": [10, 13], "shuffl": [10, 13], "ruleset_stat": [10, 12, 13], "173054": 10, "120460": 10, "029986": 10, "689655": 10, "310345": 10, "491183": 10, "736226": 10, "309334": 10, "019831": 10, "019993": 10, "024284": 10, "931034": 10, "808511": 10, "191489": 10, "170010": 10, "679398": 10, "901976": 10, "533333": 10, "825462": 10, "966346": 10, "158416": 10, "124762": 10, "174538": 10, "358795": 10, "730033": 10, "244275": 10, "809997": 10, "85": [10, 11, 12, 13], "402": 10, "034816": 10, "360": 10, "663511": 10, "guid": 11, "follow": 11, "scheme": 11, "introduc": 11, "guider": 11, "sikora": 11, "et": 11, "al": 11, "2019": 11, "basic": [11, 12, 13, 15], "how": 11, "classification_dataset_url": 11, "df": [11, 15], "forb": 11, "1427": 11, "1653": 11, "1006585": 11, "1752": 11, "2733": 11, "634250": 11, "1655": 11, "386010": 11, "1686": 11, "2892": 11, "2068": 11, "1004565": 11, "2184": 11, "901": 11, "3850": 11, "9600": 11, "8100": 11, "5500": 11, "40": [11, 12, 13], "1150": 11, "695": 11, "48": [11, 12], "10915": 11, "2500": 11, "3950": 11, "75000": 11, "378500": 11, "85450": 11, "5750": 11, "508210": 11, "927": 11, "2489": 11, "318735": 11, "392530": 11, "6750": 11, "3881": 11, "31200": 11, "673155": 11, "10000": 11, "1161025": 11, "45000": 11, "34880": 11, "281": 11, "135": 11, "498": 11, "33010": 11, "106": 11, "54930": 11, "109": 11, "98": [11, 13], "48545": 11, "32795": 11, "16805": 11, "32020": 11, "19670": 11, "40735": 11, "470": 11, "115450": 11, "regression_datset_url": 11, "methan": [11, 12, 15], "mm116_pred": [11, 12, 15], "mm31": [11, 12], "mm116": [11, 12], "as038": [11, 12], "pg072": [11, 12], "ba13": [11, 12], "dmm116": [11, 12], "1076": [11, 12], "49": [11, 12], "13363": 11, "1077": [11, 12], "13364": 11, "13365": 11, "13366": 11, "13367": 11, "13368": [11, 12], "regressionrul": [11, 12, 15], "rulekitjavaexcept": [11, 13], "reg": [11, 12, 15], "01": 11, "44": [11, 12, 13], "1075": [11, 12], "20": [11, 12], "43": [11, 12, 13], "61": [11, 12], "56": 11, "82": 11, "survival_dataset_url": 11, "bmt": [11, 13, 15], "survival_statu": [11, 13, 15], "cd34kgx10d6": [11, 13, 15], "extcgvhd": [11, 13, 15], "attr": [11, 15], "ancrecoveri": [11, 13, 15], "26": [11, 12, 13], "srv": [11, 13], "86": 11, "pltrecoveri": [11, 13], "500142": 11, "recipientag": [11, 13], "17": [11, 12, 13], "recipientrh": [11, 13], "relaps": [11, 13], "gendermatch": [11, 13], "donorag": [11, 13], "cd3dcd34": [11, 13], "97": 11, "txpostrelaps": 11, "recipientageint": 11, "94": [11, 13], "rbodymass": [11, 13], "iiiv": [11, 13], "stemcellsourc": [11, 13], "download": 12, "base_dataset_url": 12, "train_dataset_url": 12, "test_dataset_url": 12, "train_df": 12, "test_df": 12, "overview": [12, 13], "shape": [12, 13], "00000": 12, "363960": 12, "775007": 12, "294734": 12, "835600": 12, "308573": 12, "1073": 12, "443372": 12, "000007": 12, "79825": 12, "117105": 12, "269366": 12, "142504": 12, "106681": 12, "461922": 12, "162811": 12, "043566": 12, "28649": 12, "170000": 12, "100000": 12, "1067": 12, "800000": 12, "20000": 12, "260000": 12, "300000": 12, "1070": 12, "50000": 12, "360000": 12, "80000": 12, "450000": 12, "820000": 12, "700000": 12, "600000": [12, 13], "1078": 12, "ntest": 12, "5728": 12, "556652": 12, "006913": 12, "236627": 12, "819239": 12, "538408": 12, "1072": 12, "691690": 12, "000017": 12, "042458": 12, "114682": 12, "167983": 12, "104913": 12, "078865": 12, "498566": 12, "799559": 12, "046849": 12, "171393": 12, "350000": [12, 13], "460000": 12, "1071": 12, "550000": 12, "640000": 12, "980000": [12, 13], "get_regression_metr": 12, "relative_error": 12, "squared_relative_error": 12, "relative_error_leni": 12, "relative_error_strict": 12, "nae_denomin": 12, "avg": 12, "sum": 12, "len": 12, "ab": 12, "corrcoef": 12, "absolute_error": 12, "normalized_absolute_error": 12, "squared_error": 12, "mean_squared_error": 12, "root_mean_squared_error": 12, "root_relative_squared_error": 12, "squared_correl": 12, "power": 12, "del": [12, 13], "_java_object": [12, 13], "c2_reg": 12, "regression_metr": 12, "corr_reg": 12, "rss_reg": 12, "onedr": 12, "pulpit": 12, "emag": 12, "git": 12, "pythonrulekit": 12, "tutorials_env": 12, "lib": 12, "site": 12, "_regress": 12, "492": 12, "futurewarn": 12, "deprec": 12, "remov": [12, 15], "root": 12, "warn": 12, "minimum_cov": [12, 13], "maximum_uncovered_fract": [12, 13], "pruning_en": [12, 13], "max_growing_condit": [12, 13], "670397": 12, "978997": 12, "637769": 12, "272727": 12, "33": [12, 13], "727273": 12, "345683": 12, "874767": 12, "732356": 12, "612636e": 12, "739791": 12, "836199": 12, "871719": 12, "285714": 12, "334990": 12, "862965": 12, "800819": 12, "046280e": 12, "929544": 12, "020750": 12, "894867": 12, "333333": 12, "166667": 12, "417440": 12, "855115": 12, "786208": 12, "242568e": 12, "089929": 12, "114526": 12, "101069": 12, "125935": 12, "382694": 12, "019753": 12, "140547": 12, "167429": 12, "937881": 12, "879620": 12, "088561": 12, "112319": 12, "099635": 12, "125846": 12, "376872": 12, "020912": 12, "144609": 12, "184988": 12, "941044": 12, "885563": 12, "092552": 12, "111375": 12, "102026": 12, "124544": 12, "393860": 12, "020544": 12, "143331": 12, "153866": 12, "945779": 12, "894498": 12, "52": 12, "08": [12, 13], "99": [12, 13], "00": 12, "66": 12, "91": [12, 13], "80": 12, "67": 12, "76": 12, "c2_predict": 12, "c2_regression_metr": 12, "corr_predict": 12, "corr_regression_metr": 12, "rss_predict": 12, "rss_regression_metr": 12, "107227": 12, "100574": 12, "094935": 12, "112747": 12, "739328": 12, "020326": 12, "142569": 12, "126236": 12, "835385": 12, "697868": 12, "105350": 12, "091827": 12, "090950": 12, "109321": 12, "726385": 12, "021890": 12, "147951": 12, "119472": 12, "866898": 12, "751512": 12, "128302": 12, "113411": 12, "111947": 12, "134690": 12, "884639": 12, "027270": 12, "165136": 12, "134849": 12, "866442": 12, "750722": 12, "kfold": 12, "neg_root_mean_squared_error": 12, "rmse": 12, "191976": 12, "best_estimator_": 12, "47": [12, 13], "1074": 12, "nan": [12, 15], "83": 12, "151842": 12, "240354": 12, "883363": 12, "190476": 12, "809524": 12, "116152": 12, "849723": 12, "952381": 12, "111355": 12, "103524": 12, "097884": 12, "114888": 12, "767792": 12, "019642": 12, "140148": 12, "125609": 12, "801204": 12, "641927": 12, "data_df": 13, "recipientgend": 13, "donorage35": 13, "donorabo": 13, "recipientabo": 13, "abomatch": 13, "cd3dkgx10d8": 13, "time_to_agvhd_iii_iv": 13, "830137": 13, "338760": 13, "999": 13, "342466": 13, "078295": 13, "1000000": 13, "163": 13, "394521": 13, "013230": 13, "435": 13, "684932": 13, "481647": 13, "358904": 13, "972255": 13, "2043": 13, "182": 13, "575342": 13, "522750": 13, "385": 13, "895890": 13, "038858": 13, "634": 13, "347945": 13, "635559": 13, "1895": 13, "185": 13, "780822": 13, "077770": 13, "382": 13, "553425": 13, "948135": 13, "1109": 13, "187": 13, "472068": 13, "931551": 13, "891781": 13, "385096": 13, "745714": 13, "801081": 13, "26752": 13, "866310": 13, "90937": 13, "919786": 13, "775408": 13, "042781": 13, "938": 13, "743316": 13, "271826": 13, "305639": 13, "914386": 13, "598716": 13, "859128": 13, "650922": 13, "161747": 13, "200525": 13, "288242": 13, "407688": 13, "418425": 13, "252689": 13, "849": 13, "589495": 13, "646575": 13, "790000": 13, "204132": 13, "040000": 13, "039726": 13, "050000": 13, "786683": 13, "687500": 13, "168": 13, "550685": 13, "720000": 13, "734462": 13, "325000": 13, "676": 13, "117809": 13, "415000": 13, "823565": 13, "785000": 13, "1604": 13, "57": 13, "780000": 13, "560970": 13, "020000": 13, "103": 13, "3364": 13, "771417": 13, "797513": 13, "902853": 13, "308021": 13, "999865": 13, "000135": 13, "000147": 13, "000184": 13, "step": [13, 15], "legend": [13, 15], "titl": [13, 15], "0x289deb3a180": 13, "kaplan_mei": [13, 15], "kaplanmeierestim": [13, 15], "curv": [13, 15], "enumer": 13, "rule_label": 13, "r": 13, "rule_km": 13, "kaplan_meier_estim": [13, 15], "whole": 13, "train_km": 13, "get_train_set_kaplan_mei": [13, 15], "r1": 13, "hlamismatch": 13, "r3": 13, "266": 13, "r4": 13, "r5": 13, "integrated_brier_scor": 13, "19651358709002972": 13, "random_st": 13, "survival_metr": 13, "append": 13, "799019": 13, "296248": 13, "477474": 13, "581667": 13, "825000": 13, "486613": 13, "995955": 13, "004045": 13, "004061": 13, "004104": 13, "20178456199764142": 13, "scorer": 13, "21437408819868886": 13, "594173": 13, "244234": 13, "312523": 13, "389262": 13, "14054870564224475": 13, "v2": [14, 15], "them": 15, "straightforward": 15, "see": 15, "below": 15, "my_induction_measur": 15, "anyth": 15, "my_pruning_measur": 15, "my_voting_measur": 15, "python_clf": 15, "avail": 15, "long": 15, "ago": 15, "origin": 15, "were": 15, "technic": 15, "prevent": 15, "come": 15, "price": 15, "provid": 15, "optim": 15, "much": 15, "faster": 15, "certainli": 15, "slow": 15, "down": 15, "went": 15, "after": 15, "switch": 15, "In": 15, "last": 15, "made": 15, "accept": 15, "like": 15, "argument": 15, "directli": 15, "server": 15, "often": 15, "quit": 15, "cumbersom": 15, "earlier": 15, "decis": 15, "refactor": 15, "easier": 15, "decision_class": 15, "becam": 15, "conclusion_valu": 15, "40274932614553977": 15, "kaplan": 15, "meier": 15, "move": 15, "would": 15, "unfortun": 15, "entir": 15, "Such": 15, "plot": 15, "chart": 15, "choic": 15, "surv": 15, "rule_estim": 15, "train_dataset_estim": 15, "0x281ac8ab830": 15, "those": 15, "revert": 15, "next": 15, "caus": 15, "known": 15, "bug": 15, "fix": 15, "beyond": 15, "scope": 15, "mere": 15, "commun": 15, "conclus": 15, "part": 15, "And": 15, "pars": 15, "order": 15, "thei": 15, "had": 15, "clone": 15, "updat": 15}, "objects": {"rulekit.classification": [[2, 0, 1, "", "ExpertRuleClassifier"], [2, 0, 1, "", "RuleClassifier"]], "rulekit.classification.ExpertRuleClassifier": [[2, 1, 1, "", "add_event_listener"], [2, 1, 1, "", "fit"], [2, 1, 1, "", "get_coverage_matrix"], [2, 1, 1, "", "get_metadata_routing"], [2, 1, 1, "", "get_params"], [2, 1, 1, "", "predict"], [2, 1, 1, "", "predict_proba"], [2, 1, 1, "", "score"], [2, 1, 1, "", "set_params"]], "rulekit.classification.RuleClassifier": [[2, 1, 1, "", "add_event_listener"], [2, 1, 1, "", "fit"], [2, 1, 1, "", "get_coverage_matrix"], [2, 1, 1, "", "get_metadata_routing"], [2, 1, 1, "", "get_params"], [2, 1, 1, "", "predict"], [2, 1, 1, "", "predict_proba"], [2, 1, 1, "", "score"], [2, 1, 1, "", "set_params"]], "rulekit": [[1, 2, 0, "-", "main"], [3, 2, 0, "-", "params"], [5, 2, 0, "-", "rules"], [6, 2, 0, "-", "stats"]], "rulekit.main": [[1, 0, 1, "", "RuleKit"]], "rulekit.main.RuleKit": [[1, 1, 1, "", "configure_java_logger"], [1, 1, 1, "", "get_java_logger_config"], [1, 1, 1, "", "init"], [1, 3, 1, "", "version"]], "rulekit.operator": [[3, 4, 1, "", "Data"]], "rulekit.params": [[3, 0, 1, "", "Measures"]], "rulekit.params.Measures": [[3, 3, 1, "", "Accuracy"], [3, 3, 1, "", "BinaryEntropy"], [3, 3, 1, "", "C1"], [3, 3, 1, "", "C2"], [3, 3, 1, "", "CFoil"], [3, 3, 1, "", "CN2Significnce"], [3, 3, 1, "", "Correlation"], [3, 3, 1, "", "Coverage"], [3, 3, 1, "", "FBayesianConfirmation"], [3, 3, 1, "", "FMeasure"], [3, 3, 1, "", "FullCoverage"], [3, 3, 1, "", "GMeasure"], [3, 3, 1, "", "GeoRSS"], [3, 3, 1, "", "InformationGain"], [3, 3, 1, "", "JMeasure"], [3, 3, 1, "", "Kappa"], [3, 3, 1, "", "Klosgen"], [3, 3, 1, "", "Laplace"], [3, 3, 1, "", "Lift"], [3, 3, 1, "", "LogRank"], [3, 3, 1, "", "LogicalSufficiency"], [3, 3, 1, "", "MEstimate"], [3, 3, 1, "", "MutualSupport"], [3, 3, 1, "", "Novelty"], [3, 3, 1, "", "OddsRatio"], [3, 3, 1, "", "OneWaySupport"], [3, 3, 1, "", "PawlakDependencyFactor"], [3, 3, 1, "", "Precision"], [3, 3, 1, "", "Q2"], [3, 3, 1, "", "RSS"], [3, 3, 1, "", "RelativeRisk"], [3, 3, 1, "", "Ripper"], [3, 3, 1, "", "RuleInterest"], [3, 3, 1, "", "SBayesian"], [3, 3, 1, "", "Sensitivity"], [3, 3, 1, "", "Specificity"], [3, 3, 1, "", "TwoWaySupport"], [3, 3, 1, "", "WeightedLaplace"], [3, 3, 1, "", "WeightedRelativeAccuracy"], [3, 3, 1, "", "YAILS"]], "rulekit.regression": [[4, 0, 1, "", "ExpertRuleRegressor"], [4, 0, 1, "", "RuleRegressor"]], "rulekit.regression.ExpertRuleRegressor": [[4, 1, 1, "", "add_event_listener"], [4, 1, 1, "", "fit"], [4, 1, 1, "", "get_coverage_matrix"], [4, 1, 1, "", "get_metadata_routing"], [4, 1, 1, "", "get_params"], [4, 1, 1, "", "predict"], [4, 1, 1, "", "score"], [4, 1, 1, "", "set_params"]], "rulekit.regression.RuleRegressor": [[4, 1, 1, "", "add_event_listener"], [4, 1, 1, "", "fit"], [4, 1, 1, "", "get_coverage_matrix"], [4, 1, 1, "", "get_metadata_routing"], [4, 1, 1, "", "get_params"], [4, 1, 1, "", "predict"], [4, 1, 1, "", "score"], [4, 1, 1, "", "set_params"]], "rulekit.rules": [[5, 0, 1, "", "InductionParameters"], [5, 0, 1, "", "Rule"], [5, 0, 1, "", "RuleSet"]], "rulekit.rules.InductionParameters": [[5, 5, 1, "", "induction_measure"], [5, 5, 1, "", "pruning_measure"], [5, 5, 1, "", "voting_measure"]], "rulekit.rules.Rule": [[5, 1, 1, "", "get_covering_information"], [5, 1, 1, "", "print_stats"], [5, 5, 1, "", "pvalue"], [5, 5, 1, "", "stats"], [5, 5, 1, "", "weight"], [5, 5, 1, "", "weighted_N"], [5, 5, 1, "", "weighted_P"], [5, 5, 1, "", "weighted_n"], [5, 5, 1, "", "weighted_p"]], "rulekit.rules.RuleSet": [[5, 1, 1, "", "calculate_avg_rule_coverage"], [5, 1, 1, "", "calculate_avg_rule_precision"], [5, 1, 1, "", "calculate_avg_rule_quality"], [5, 1, 1, "", "calculate_conditions_count"], [5, 1, 1, "", "calculate_induced_conditions_count"], [5, 1, 1, "", "calculate_significance"], [5, 1, 1, "", "calculate_significance_fdr"], [5, 1, 1, "", "calculate_significance_fwer"], [5, 5, 1, "", "growing_time"], [5, 5, 1, "", "is_voting"], [5, 5, 1, "", "parameters"], [5, 5, 1, "", "pruning_time"], [5, 5, 1, "", "rules"], [5, 5, 1, "", "stats"], [5, 5, 1, "", "total_time"]], "rulekit.stats": [[6, 0, 1, "", "RuleSetStatistics"], [6, 0, 1, "", "RuleStatistics"]], "rulekit.stats.RuleSetStatistics": [[6, 3, 1, "", "SIGNIFICANCE_LEVEL"]], "rulekit.stats.RuleStatistics": [[6, 3, 1, "", "N"], [6, 3, 1, "", "P"], [6, 3, 1, "", "n"], [6, 3, 1, "", "p"], [6, 3, 1, "", "pvalue"], [6, 3, 1, "", "weight"]], "rulekit.survival": [[7, 0, 1, "", "ExpertSurvivalRules"], [7, 0, 1, "", "SurvivalRules"]], "rulekit.survival.ExpertSurvivalRules": [[7, 1, 1, "", "add_event_listener"], [7, 1, 1, "", "fit"], [7, 1, 1, "", "get_coverage_matrix"], [7, 1, 1, "", "get_metadata_routing"], [7, 1, 1, "", "get_params"], [7, 1, 1, "", "predict"], [7, 1, 1, "", "score"], [7, 1, 1, "", "set_params"]], "rulekit.survival.SurvivalRules": [[7, 1, 1, "", "add_event_listener"], [7, 1, 1, "", "fit"], [7, 1, 1, "", "get_coverage_matrix"], [7, 1, 1, "", "get_metadata_routing"], [7, 1, 1, "", "get_params"], [7, 1, 1, "", "predict"], [7, 1, 1, "", "score"], [7, 1, 1, "", "set_params"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:module", "3": "py:attribute", "4": "py:data", "5": "py:property"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "module", "Python module"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "data", "Python data"], "5": ["py", "property", "Python property"]}, "titleterms": {"rulekit": [0, 15], "tabl": [0, 1, 9, 14], "content": [0, 1, 9, 14], "code": 1, "document": 1, "classif": [2, 10, 11, 15], "paramet": 3, "regress": [4, 11, 12, 15], "rule": [5, 10, 11, 12, 13, 15], "statist": 6, "surviv": [7, 11, 13, 15], "quick": 8, "start": 8, "instal": [8, 10, 13], "packag": 8, "usag": 8, "tutori": 9, "depend": [10, 13], "summari": [10, 12, 13], "dataset": [10, 11, 12, 13], "decis": 10, "class": 10, "distribut": 10, "helper": [10, 12, 13], "function": [10, 12, 13], "calcul": [10, 12], "metric": [10, 12], "induct": [10, 11, 12, 13, 15], "full": [10, 13], "c2": [10, 12], "measur": [10, 12, 15], "gener": [10, 12], "correl": [10, 12], "rss": [10, 12], "stratifi": [10, 13], "k": [10, 13], "fold": [10, 13], "cross": [10, 13], "valid": [10, 12, 13], "hyperparamet": [10, 12, 13], "tune": [10, 12, 13], "build": [10, 13], "model": [10, 12, 13], "split": [10, 13], "train": [10, 12, 13], "test": [10, 12, 13], "80": [10, 13], "20": [10, 13], "expert": [11, 15], "load": 11, "defin": [11, 15], "knowledg": 11, "condit": 11, "file": [12, 15], "evalu": [12, 13], "set": [12, 13], "predict": [12, 13], "us": [12, 15], "select": 12, "from": [12, 15], "analysi": 13, "creat": 13, "ruleset": 13, "characterist": 13, "datafram": 13, "plot": 13, "estim": 13, "first": 13, "five": 13, "exampl": 13, "kaplan": 13, "meier": 13, "": [13, 14, 15], "top": 13, "what": [14, 15], "new": [14, 15], "version": 15, "2": 15, "1": 15, "21": 15, "0": 15, "abil": 15, "user": 15, "qualiti": 15, "dure": 15, "prune": 15, "vote": 15, "phase": 15, "read": 15, "arff": 15, "url": 15, "via": 15, "http": 15, "3": 15, "improv": 15, "api": 15, "For": 15, "4": 15, "chang": 15, "break": 15, "other": 15}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"RuleKit": [[0, "rulekit"]], "Table of contents:": [[0, null], [1, null], [9, null], [14, null]], "Code documentation": [[1, "module-rulekit.main"]], "Classification": [[2, "classification"], [10, "Classification"], [11, "Classification"]], "Parameters": [[3, "parameters"]], "Regression": [[4, "regression"], [11, "Regression"], [12, "Regression"]], "Rules": [[5, "module-rulekit.rules"]], "Statistics": [[6, "module-rulekit.stats"]], "Survival": [[7, "survival"], [11, "Survival"]], "Quick start": [[8, "quick-start"]], "Installation": [[8, "installation"]], "Package usage": [[8, "package-usage"]], "Tutorials": [[9, "tutorials"]], "Install dependencies": [[10, "Install-dependencies"], [13, "Install-dependencies"]], "Summary of the dataset": [[10, "Summary-of-the-dataset"], [12, "Summary-of-the-dataset"], [13, "Summary-of-the-dataset"]], "Decision class distribution": [[10, "Decision-class-distribution"]], "Helper function for calculating metrics": [[10, "Helper-function-for-calculating-metrics"], [12, "Helper-function-for-calculating-metrics"]], "Rule induction on full dataset": [[10, "Rule-induction-on-full-dataset"], [13, "Rule-induction-on-full-dataset"]], "C2 Measure generated rules": [[10, "C2-Measure-generated-rules"], [12, "C2-Measure-generated-rules"]], "Correlation Measure generated rules": [[10, "Correlation-Measure-generated-rules"], [12, "Correlation-Measure-generated-rules"]], "RSS Measure generated rules": [[10, "RSS-Measure-generated-rules"], [12, "RSS-Measure-generated-rules"]], "Stratified K-Folds cross-validation": [[10, "Stratified-K-Folds-cross-validation"], [13, "Stratified-K-Folds-cross-validation"]], "Hyperparameters tuning": [[10, "Hyperparameters-tuning"], [12, "Hyperparameters-tuning"], [13, "Hyperparameters-tuning"]], "Building model with tuned hyperparameters": [[10, "Building-model-with-tuned-hyperparameters"], [13, "Building-model-with-tuned-hyperparameters"]], "Split dataset to train and test (80%/20%).": [[10, "Split-dataset-to-train-and-test-(80%/20%)."]], "Validate model on test dataset": [[10, "Validate-model-on-test-dataset"], [12, "Validate-model-on-test-dataset"], [13, "Validate-model-on-test-dataset"]], "Expert Rules": [[11, "Expert-Rules"]], "Load dataset": [[11, "Load-dataset"], [11, "id1"], [11, "id3"]], "Define expert knowledge": [[11, "Define-expert-knowledge"]], "Rule induction": [[11, "Rule-induction"], [11, "id2"], [11, "id5"]], "Define rules and conditions": [[11, "Define-rules-and-conditions"], [11, "id4"]], "Train file": [[12, "Train-file"]], "Test file": [[12, "Test-file"]], "Rule induction on training dataset": [[12, "Rule-induction-on-training-dataset"]], "Evaluation on a test set": [[12, "Evaluation-on-a-test-set"]], "Prediction using the model selected from the tuning": [[12, "Prediction-using-the-model-selected-from-the-tuning"]], "Survival analysis": [[13, "Survival-analysis"]], "Helper function for creating ruleset characteristics dataframe": [[13, "Helper-function-for-creating-ruleset-characteristics-dataframe"]], "Plot predicted estimators for the first five examples": [[13, "Plot-predicted-estimators-for-the-first-five-examples"]], "Plot rules Kaplan-Meier\u2019s estimators on top of the training dataset estimator": [[13, "Plot-rules-Kaplan-Meier's-estimators-on-top-of-the-training-dataset-estimator"]], "Rules evaluation on full set": [[13, "Rules-evaluation-on-full-set"]], "Split dataset to train and test (80%/20%)": [[13, "Split-dataset-to-train-and-test-(80%/20%)"]], "What\u2019s new": [[14, "what-s-new"]], "What\u2019s new in RuleKit version 2.1.21.0?": [[15, "What's-new-in-RuleKit-version-2.1.21.0?"]], "1. Ability to use user-defined quality measures during rule induction, pruning, and voting phases.": [[15, "1.-Ability-to-use-user-defined-quality-measures-during-rule-induction,-pruning,-and-voting-phases."]], "2. Reading arff files from url via HTTP/HTTPS.": [[15, "2.-Reading-arff-files-from-url-via-HTTP/HTTPS."]], "3. Improves rules API": [[15, "3.-Improves-rules-API"]], "3.1 For classification rules": [[15, "3.1-For-classification-rules"]], "3.2 For regression rules": [[15, "3.2-For-regression-rules"]], "3.3 For survival rules": [[15, "3.3-For-survival-rules"]], "4. Changes in expert rules induction for regression and survival \u2757BREAKING CHANGES": [[15, "4.-Changes-in-expert-rules-induction-for-regression-and-survival-\u2757BREAKING-CHANGES"]], "Other changes": [[15, "Other-changes"]]}, "indexentries": {"rulekit (class in rulekit.main)": [[1, "rulekit.main.RuleKit"]], "configure_java_logger() (rulekit.main.rulekit static method)": [[1, "rulekit.main.RuleKit.configure_java_logger"]], "get_java_logger_config() (rulekit.main.rulekit static method)": [[1, "rulekit.main.RuleKit.get_java_logger_config"]], "init() (rulekit.main.rulekit static method)": [[1, "rulekit.main.RuleKit.init"]], "module": [[1, "module-rulekit.main"], [3, "module-rulekit.params"], [5, "module-rulekit.rules"], [6, "module-rulekit.stats"]], "rulekit.main": [[1, "module-rulekit.main"]], "version (rulekit.main.rulekit attribute)": [[1, "rulekit.main.RuleKit.version"]], "expertruleclassifier (class in rulekit.classification)": [[2, "rulekit.classification.ExpertRuleClassifier"]], "ruleclassifier (class in rulekit.classification)": [[2, "rulekit.classification.RuleClassifier"]], "add_event_listener() (rulekit.classification.expertruleclassifier method)": [[2, "rulekit.classification.ExpertRuleClassifier.add_event_listener"]], "add_event_listener() (rulekit.classification.ruleclassifier method)": [[2, "rulekit.classification.RuleClassifier.add_event_listener"]], "fit() (rulekit.classification.expertruleclassifier method)": [[2, "rulekit.classification.ExpertRuleClassifier.fit"]], "fit() (rulekit.classification.ruleclassifier method)": [[2, "rulekit.classification.RuleClassifier.fit"]], "get_coverage_matrix() (rulekit.classification.expertruleclassifier method)": [[2, "rulekit.classification.ExpertRuleClassifier.get_coverage_matrix"]], "get_coverage_matrix() (rulekit.classification.ruleclassifier method)": [[2, "rulekit.classification.RuleClassifier.get_coverage_matrix"]], "get_metadata_routing() (rulekit.classification.expertruleclassifier method)": [[2, "rulekit.classification.ExpertRuleClassifier.get_metadata_routing"]], "get_metadata_routing() (rulekit.classification.ruleclassifier method)": [[2, "rulekit.classification.RuleClassifier.get_metadata_routing"]], "get_params() (rulekit.classification.expertruleclassifier method)": [[2, "rulekit.classification.ExpertRuleClassifier.get_params"]], "get_params() (rulekit.classification.ruleclassifier method)": [[2, "rulekit.classification.RuleClassifier.get_params"]], "predict() (rulekit.classification.expertruleclassifier method)": [[2, "rulekit.classification.ExpertRuleClassifier.predict"]], "predict() (rulekit.classification.ruleclassifier method)": [[2, "rulekit.classification.RuleClassifier.predict"]], "predict_proba() (rulekit.classification.expertruleclassifier method)": [[2, "rulekit.classification.ExpertRuleClassifier.predict_proba"]], "predict_proba() (rulekit.classification.ruleclassifier method)": [[2, "rulekit.classification.RuleClassifier.predict_proba"]], "score() (rulekit.classification.expertruleclassifier method)": [[2, "rulekit.classification.ExpertRuleClassifier.score"]], "score() (rulekit.classification.ruleclassifier method)": [[2, "rulekit.classification.RuleClassifier.score"]], "set_params() (rulekit.classification.expertruleclassifier method)": [[2, "rulekit.classification.ExpertRuleClassifier.set_params"]], "set_params() (rulekit.classification.ruleclassifier method)": [[2, "rulekit.classification.RuleClassifier.set_params"]], "accuracy (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.Accuracy"]], "binaryentropy (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.BinaryEntropy"]], "c1 (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.C1"]], "c2 (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.C2"]], "cfoil (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.CFoil"]], "cn2significnce (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.CN2Significnce"]], "correlation (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.Correlation"]], "coverage (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.Coverage"]], "fbayesianconfirmation (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.FBayesianConfirmation"]], "fmeasure (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.FMeasure"]], "fullcoverage (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.FullCoverage"]], "gmeasure (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.GMeasure"]], "georss (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.GeoRSS"]], "informationgain (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.InformationGain"]], "jmeasure (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.JMeasure"]], "kappa (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.Kappa"]], "klosgen (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.Klosgen"]], "laplace (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.Laplace"]], "lift (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.Lift"]], "logrank (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.LogRank"]], "logicalsufficiency (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.LogicalSufficiency"]], "mestimate (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.MEstimate"]], "measures (class in rulekit.params)": [[3, "rulekit.params.Measures"]], "mutualsupport (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.MutualSupport"]], "novelty (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.Novelty"]], "oddsratio (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.OddsRatio"]], "onewaysupport (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.OneWaySupport"]], "pawlakdependencyfactor (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.PawlakDependencyFactor"]], "precision (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.Precision"]], "q2 (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.Q2"]], "rss (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.RSS"]], "relativerisk (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.RelativeRisk"]], "ripper (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.Ripper"]], "ruleinterest (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.RuleInterest"]], "sbayesian (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.SBayesian"]], "sensitivity (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.Sensitivity"]], "specificity (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.Specificity"]], "twowaysupport (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.TwoWaySupport"]], "weightedlaplace (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.WeightedLaplace"]], "weightedrelativeaccuracy (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.WeightedRelativeAccuracy"]], "yails (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.YAILS"]], "rulekit.operator.data (built-in variable)": [[3, "rulekit.operator.Data"]], "rulekit.params": [[3, "module-rulekit.params"]], "expertruleregressor (class in rulekit.regression)": [[4, "rulekit.regression.ExpertRuleRegressor"]], "ruleregressor (class in rulekit.regression)": [[4, "rulekit.regression.RuleRegressor"]], "add_event_listener() (rulekit.regression.expertruleregressor method)": [[4, "rulekit.regression.ExpertRuleRegressor.add_event_listener"]], "add_event_listener() (rulekit.regression.ruleregressor method)": [[4, "rulekit.regression.RuleRegressor.add_event_listener"]], "fit() (rulekit.regression.expertruleregressor method)": [[4, "rulekit.regression.ExpertRuleRegressor.fit"]], "fit() (rulekit.regression.ruleregressor method)": [[4, "rulekit.regression.RuleRegressor.fit"]], "get_coverage_matrix() (rulekit.regression.expertruleregressor method)": [[4, "rulekit.regression.ExpertRuleRegressor.get_coverage_matrix"]], "get_coverage_matrix() (rulekit.regression.ruleregressor method)": [[4, "rulekit.regression.RuleRegressor.get_coverage_matrix"]], "get_metadata_routing() (rulekit.regression.expertruleregressor method)": [[4, "rulekit.regression.ExpertRuleRegressor.get_metadata_routing"]], "get_metadata_routing() (rulekit.regression.ruleregressor method)": [[4, "rulekit.regression.RuleRegressor.get_metadata_routing"]], "get_params() (rulekit.regression.expertruleregressor method)": [[4, "rulekit.regression.ExpertRuleRegressor.get_params"]], "get_params() (rulekit.regression.ruleregressor method)": [[4, "rulekit.regression.RuleRegressor.get_params"]], "predict() (rulekit.regression.expertruleregressor method)": [[4, "rulekit.regression.ExpertRuleRegressor.predict"]], "predict() (rulekit.regression.ruleregressor method)": [[4, "rulekit.regression.RuleRegressor.predict"]], "score() (rulekit.regression.expertruleregressor method)": [[4, "rulekit.regression.ExpertRuleRegressor.score"]], "score() (rulekit.regression.ruleregressor method)": [[4, "rulekit.regression.RuleRegressor.score"]], "set_params() (rulekit.regression.expertruleregressor method)": [[4, "rulekit.regression.ExpertRuleRegressor.set_params"]], "set_params() (rulekit.regression.ruleregressor method)": [[4, "rulekit.regression.RuleRegressor.set_params"]], "inductionparameters (class in rulekit.rules)": [[5, "rulekit.rules.InductionParameters"]], "rule (class in rulekit.rules)": [[5, "rulekit.rules.Rule"]], "ruleset (class in rulekit.rules)": [[5, "rulekit.rules.RuleSet"]], "calculate_avg_rule_coverage() (rulekit.rules.ruleset method)": [[5, "rulekit.rules.RuleSet.calculate_avg_rule_coverage"]], "calculate_avg_rule_precision() (rulekit.rules.ruleset method)": [[5, "rulekit.rules.RuleSet.calculate_avg_rule_precision"]], "calculate_avg_rule_quality() (rulekit.rules.ruleset method)": [[5, "rulekit.rules.RuleSet.calculate_avg_rule_quality"]], "calculate_conditions_count() (rulekit.rules.ruleset method)": [[5, "rulekit.rules.RuleSet.calculate_conditions_count"]], "calculate_induced_conditions_count() (rulekit.rules.ruleset method)": [[5, "rulekit.rules.RuleSet.calculate_induced_conditions_count"]], "calculate_significance() (rulekit.rules.ruleset method)": [[5, "rulekit.rules.RuleSet.calculate_significance"]], "calculate_significance_fdr() (rulekit.rules.ruleset method)": [[5, "rulekit.rules.RuleSet.calculate_significance_fdr"]], "calculate_significance_fwer() (rulekit.rules.ruleset method)": [[5, "rulekit.rules.RuleSet.calculate_significance_fwer"]], "get_covering_information() (rulekit.rules.rule method)": [[5, "rulekit.rules.Rule.get_covering_information"]], "growing_time (rulekit.rules.ruleset property)": [[5, "rulekit.rules.RuleSet.growing_time"]], "induction_measure (rulekit.rules.inductionparameters property)": [[5, "rulekit.rules.InductionParameters.induction_measure"]], "is_voting (rulekit.rules.ruleset property)": [[5, "rulekit.rules.RuleSet.is_voting"]], "parameters (rulekit.rules.ruleset property)": [[5, "rulekit.rules.RuleSet.parameters"]], "print_stats() (rulekit.rules.rule method)": [[5, "rulekit.rules.Rule.print_stats"]], "pruning_measure (rulekit.rules.inductionparameters property)": [[5, "rulekit.rules.InductionParameters.pruning_measure"]], "pruning_time (rulekit.rules.ruleset property)": [[5, "rulekit.rules.RuleSet.pruning_time"]], "pvalue (rulekit.rules.rule property)": [[5, "rulekit.rules.Rule.pvalue"]], "rulekit.rules": [[5, "module-rulekit.rules"]], "rules (rulekit.rules.ruleset property)": [[5, "rulekit.rules.RuleSet.rules"]], "stats (rulekit.rules.rule property)": [[5, "rulekit.rules.Rule.stats"]], "stats (rulekit.rules.ruleset property)": [[5, "rulekit.rules.RuleSet.stats"]], "total_time (rulekit.rules.ruleset property)": [[5, "rulekit.rules.RuleSet.total_time"]], "voting_measure (rulekit.rules.inductionparameters property)": [[5, "rulekit.rules.InductionParameters.voting_measure"]], "weight (rulekit.rules.rule property)": [[5, "rulekit.rules.Rule.weight"]], "weighted_n (rulekit.rules.rule property)": [[5, "rulekit.rules.Rule.weighted_N"], [5, "rulekit.rules.Rule.weighted_n"]], "weighted_p (rulekit.rules.rule property)": [[5, "rulekit.rules.Rule.weighted_P"], [5, "rulekit.rules.Rule.weighted_p"]], "n (rulekit.stats.rulestatistics attribute)": [[6, "rulekit.stats.RuleStatistics.N"], [6, "rulekit.stats.RuleStatistics.n"]], "p (rulekit.stats.rulestatistics attribute)": [[6, "rulekit.stats.RuleStatistics.P"], [6, "rulekit.stats.RuleStatistics.p"]], "rulesetstatistics (class in rulekit.stats)": [[6, "rulekit.stats.RuleSetStatistics"]], "rulestatistics (class in rulekit.stats)": [[6, "rulekit.stats.RuleStatistics"]], "significance_level (rulekit.stats.rulesetstatistics attribute)": [[6, "rulekit.stats.RuleSetStatistics.SIGNIFICANCE_LEVEL"]], "pvalue (rulekit.stats.rulestatistics attribute)": [[6, "rulekit.stats.RuleStatistics.pvalue"]], "rulekit.stats": [[6, "module-rulekit.stats"]], "weight (rulekit.stats.rulestatistics attribute)": [[6, "rulekit.stats.RuleStatistics.weight"]], "expertsurvivalrules (class in rulekit.survival)": [[7, "rulekit.survival.ExpertSurvivalRules"]], "survivalrules (class in rulekit.survival)": [[7, "rulekit.survival.SurvivalRules"]], "add_event_listener() (rulekit.survival.expertsurvivalrules method)": [[7, "rulekit.survival.ExpertSurvivalRules.add_event_listener"]], "add_event_listener() (rulekit.survival.survivalrules method)": [[7, "rulekit.survival.SurvivalRules.add_event_listener"]], "fit() (rulekit.survival.expertsurvivalrules method)": [[7, "rulekit.survival.ExpertSurvivalRules.fit"]], "fit() (rulekit.survival.survivalrules method)": [[7, "rulekit.survival.SurvivalRules.fit"]], "get_coverage_matrix() (rulekit.survival.expertsurvivalrules method)": [[7, "rulekit.survival.ExpertSurvivalRules.get_coverage_matrix"]], "get_coverage_matrix() (rulekit.survival.survivalrules method)": [[7, "rulekit.survival.SurvivalRules.get_coverage_matrix"]], "get_metadata_routing() (rulekit.survival.expertsurvivalrules method)": [[7, "rulekit.survival.ExpertSurvivalRules.get_metadata_routing"]], "get_metadata_routing() (rulekit.survival.survivalrules method)": [[7, "rulekit.survival.SurvivalRules.get_metadata_routing"]], "get_params() (rulekit.survival.expertsurvivalrules method)": [[7, "rulekit.survival.ExpertSurvivalRules.get_params"]], "get_params() (rulekit.survival.survivalrules method)": [[7, "rulekit.survival.SurvivalRules.get_params"]], "predict() (rulekit.survival.expertsurvivalrules method)": [[7, "rulekit.survival.ExpertSurvivalRules.predict"]], "predict() (rulekit.survival.survivalrules method)": [[7, "rulekit.survival.SurvivalRules.predict"]], "score() (rulekit.survival.expertsurvivalrules method)": [[7, "rulekit.survival.ExpertSurvivalRules.score"]], "score() (rulekit.survival.survivalrules method)": [[7, "rulekit.survival.SurvivalRules.score"]], "set_params() (rulekit.survival.expertsurvivalrules method)": [[7, "rulekit.survival.ExpertSurvivalRules.set_params"]], "set_params() (rulekit.survival.survivalrules method)": [[7, "rulekit.survival.SurvivalRules.set_params"]]}})