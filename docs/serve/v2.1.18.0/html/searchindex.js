Search.setIndex({"docnames": ["index", "rst/autodoc", "rst/autodoc/classification", "rst/autodoc/params", "rst/autodoc/regression", "rst/autodoc/rules", "rst/autodoc/stats", "rst/autodoc/survival", "rst/quick_start", "rst/tutorials", "rst/tutorials/classification", "rst/tutorials/expert_rules", "rst/tutorials/regression", "rst/tutorials/survival", "rst/whats_new", "rst/whats_new/v2.1.18.0"], "filenames": ["index.rst", "rst/autodoc.rst", "rst/autodoc/classification.rst", "rst/autodoc/params.rst", "rst/autodoc/regression.rst", "rst/autodoc/rules.rst", "rst/autodoc/stats.rst", "rst/autodoc/survival.rst", "rst/quick_start.rst", "rst/tutorials.rst", "rst/tutorials/classification.ipynb", "rst/tutorials/expert_rules.ipynb", "rst/tutorials/regression.ipynb", "rst/tutorials/survival.ipynb", "rst/whats_new.rst", "rst/whats_new/v2.1.18.0.ipynb"], "titles": ["RuleKit", "Code documentation", "Classification", "Parameters", "Regression", "Rules", "Statistics", "Survival", "Quick start", "Tutorials", "Classification", "Expert Rules", "Regression", "Survival analysis", "What\u2019s new", "What\u2019s new in RuleKit version 2.1.18.0?"], "terms": {"thi": [0, 1, 2, 4, 7, 8, 10, 11, 12, 13, 15], "packag": [0, 1, 10, 12, 13, 15], "i": [0, 1, 2, 4, 6, 7, 8, 11, 12, 15], "python": [0, 1, 8, 15], "wrapper": [0, 1, 8, 15], "librari": [0, 8, 15], "versatil": 0, "tool": 0, "rule": [0, 1, 2, 3, 4, 6, 7, 9], "learn": [0, 2, 4, 7, 8, 15], "base": [0, 3, 4], "sequenti": 0, "cover": [0, 2, 4, 5, 6, 7, 10, 12, 13], "induct": [0, 1, 2, 3, 4, 5, 7], "algorithm": [0, 11], "suitabl": 0, "classif": [0, 1, 4, 7, 8, 9], "regress": [0, 1, 9], "surviv": [0, 1, 9, 15], "problem": [0, 2, 4, 7, 10, 11, 12, 13, 15], "aim": 0, "give": 0, "an": [0, 2, 11, 13, 15], "easi": 0, "wai": 0, "integr": [0, 7, 13], "function": [0, 7], "project": [0, 15], "notebook": [0, 10, 11, 12, 13], "all": [0, 2, 5, 7, 15], "model": [0, 2, 3, 4, 7, 8, 11], "ar": [0, 2, 4, 5, 7, 8, 15], "writen": 0, "compat": [0, 2, 4, 7, 15], "scikit": [0, 2, 4, 7, 8, 10, 12], "quick": 0, "start": [0, 1], "what": 0, "new": [0, 2, 4, 7], "tutori": [0, 8, 10, 11, 12, 13], "code": [0, 11, 13, 15], "document": 0, "contain": [1, 2, 3, 4, 5, 6, 7], "class": [1, 2, 3, 4, 5, 6, 7, 11, 15], "initi": [1, 2, 4, 7, 11], "rulekit": [1, 2, 3, 4, 5, 6, 7, 8], "java": [1, 8, 15], "backend": 1, "main": 1, "us": [1, 2, 3, 4, 5, 7, 8, 10, 13, 15], "It": [1, 8, 15], "jvm": 1, "underhood": 1, "setup": 1, "jar": 1, "sinc": 1, "version": [1, 8], "1": [1, 2, 4, 7, 8, 10, 11, 12, 13, 14], "7": [1, 10, 11, 12, 13], "0": [1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 14], "need": [1, 8], "manual": 1, "you": [1, 3, 8, 10, 11, 12, 13, 15], "mai": [1, 2, 4, 7, 8, 15], "just": [1, 2], "skip": 1, "init": 1, "line": [1, 13, 15], "howev": [1, 15], "certain": [1, 2, 4, 7], "scenario": 1, "when": [1, 2, 7], "want": 1, "custom": [1, 15], "file": [1, 11, 13], "modifi": 1, "vm": 1, "paramet": [1, 2, 4, 5, 7, 8, 10, 12, 13], "can": [1, 2, 3, 4, 7, 8, 10, 12, 13, 15], "equal": [1, 10], "type": [1, 2, 3, 4, 5, 6, 7, 12], "str": [1, 2, 4, 5, 7, 10, 11, 12, 13, 15], "static": 1, "configure_java_logg": [1, 15], "log_file_path": [1, 15], "verbosity_level": [1, 15], "int": [1, 2, 4, 6, 7, 10, 11], "enabl": [1, 2, 4, 7], "debug": [1, 15], "log": 1, "probabl": [1, 2, 7, 13], "don": 1, "t": [1, 2, 4, 7], "method": [1, 2], "unless": 1, "too": 1, "deep": [1, 2, 4, 7], "dive": 1, "process": 1, "your": [1, 15], "re": 1, "some": [1, 2, 15], "issu": 1, "path": 1, "where": [1, 2, 4, 7], "store": 1, "option": [1, 2], "verbos": [1, 12], "level": [1, 5, 6], "minimum": [1, 2, 4, 7], "valu": [1, 2, 3, 4, 5, 6, 7, 10, 15], "maximum": [1, 2, 4, 7], "2": [1, 2, 4, 10, 11, 12, 13], "default": [1, 2, 4, 6, 7], "get_java_logger_config": 1, "_rulekitjavaloggerconfig": 1, "none": [1, 2, 4, 7, 11, 13], "return": [1, 2, 4, 5, 7, 10, 12, 13, 15], "logger": 1, "configur": 1, "initial_heap_s": 1, "max_heap_s": 1, "rulekit_jar_file_path": 1, "load": 1, "have": [1, 15], "call": [1, 8, 15], "befor": 1, "ani": [1, 2, 4, 7, 11], "oper": [1, 2, 3, 4, 7], "heap": 1, "size": [1, 10], "mb": 1, "max": [1, 10, 12, 13], "note": [1, 2], "own": [1, 15], "otherwis": [1, 2], "leav": [1, 15], "offici": 1, "releas": [1, 15], "rais": [1, 2, 4, 7], "except": [1, 13, 15], "If": [1, 2, 4, 7], "fail": [1, 15], "statist": [1, 5, 10, 12, 13], "ruleclassifi": [2, 4, 7, 8, 10, 11], "minsupp_new": [2, 4, 7, 10, 11, 12, 13], "float": [2, 4, 5, 6, 7], "05": [2, 4, 6, 7, 10, 11, 12, 13], "induction_measur": [2, 4, 5, 10, 12], "measur": [2, 3, 4, 5, 11, 13], "correl": [2, 3, 4], "pruning_measur": [2, 4, 5, 10, 12], "voting_measur": [2, 4, 5, 10, 12], "max_grow": [2, 4, 7, 11], "enable_prun": [2, 4, 7], "bool": [2, 4, 5, 7], "true": [2, 4, 7, 10, 11, 12, 13], "ignore_miss": [2, 4, 7, 12, 13], "fals": [2, 4, 5, 6, 7, 10, 11, 12, 13], "max_uncovered_fract": [2, 4, 7], "select_best_candid": [2, 4, 7], "complementary_condit": [2, 4, 7], "control_apriori_precis": 2, "max_rule_count": [2, 4, 7], "approximate_induct": 2, "approximate_bins_count": 2, "100": 2, "5": [2, 4, 7, 10, 11, 12, 13], "number": [2, 4, 5, 6, 7, 12, 13], "fraction": [2, 4, 5, 6, 7], "previous": [2, 4, 7, 15], "uncov": [2, 4, 7], "exampl": [2, 4, 7, 8, 10, 11, 12, 13, 15], "posit": [2, 4, 5, 6, 7, 10], "param": [2, 3, 4, 10, 11, 12, 13], "dure": [2, 3, 4, 5, 15], "union": [2, 3, 4, 5, 7, 15], "prune": [2, 3, 4, 5, 6, 7], "could": [2, 4, 7], "user": [2, 4, 10, 11, 15], "defin": [2, 4, 10, 12, 13], "string": [2, 4, 7, 15], "p": [2, 4, 5, 6], "n": [2, 4, 6, 10], "vote": [2, 3, 4, 5, 10], "non": [2, 4, 7], "neg": [2, 4, 5, 6, 7, 10], "integ": [2, 4, 7], "repres": [2, 4, 5, 7], "condit": [2, 4, 5, 6, 7], "which": [2, 4, 7, 11, 15], "ad": [2, 4, 7, 15], "grow": [2, 4, 5, 6, 7], "phase": [2, 4, 7], "larg": [2, 4, 7], "dataset": [2, 4, 7, 8, 15], "execut": [2, 4, 7], "time": [2, 4, 5, 6, 7, 13], "prohibit": [2, 4, 7], "indic": [2, 4, 5, 7], "limit": [2, 4, 7], "disabl": [2, 4, 7], "boolean": [2, 4, 7], "tell": [2, 4, 7], "whether": [2, 4, 5, 7], "miss": [2, 4, 7], "should": [2, 4, 7, 8, 15], "ignor": [2, 4, 7], "given": [2, 4, 7], "attribut": [2, 4, 7, 11, 12, 13], "alwai": [2, 4, 7], "cconsid": 2, "fulfil": [2, 4, 7], "build": [2, 4, 7], "upon": [2, 4, 7], "point": [2, 4, 7], "from": [2, 4, 7, 8, 10, 11, 13, 15], "interv": [2, 4, 7], "remain": [2, 4, 7], "set": [2, 4, 5, 6, 7, 8, 11, 15], "flag": [2, 4, 7], "determin": [2, 4, 7], "best": [2, 4, 7, 10, 12, 13], "candid": [2, 4, 7, 12], "select": [2, 4, 7], "complementari": [2, 4, 7], "form": [2, 4, 7], "nomin": [2, 4, 7], "support": [2, 4, 7], "induc": [2, 4, 5, 6, 7], "verifi": 2, "precis": [2, 3, 5, 6, 10], "higher": 2, "than": 2, "apriori": 2, "investig": 2, "gener": [2, 4, 7], "data": [2, 3, 4, 7, 8, 13, 15], "appli": [2, 4, 7], "singl": [2, 4, 5, 6, 7], "approxim": 2, "heurist": 2, "doe": [2, 15], "check": [2, 8], "possibl": 2, "split": 2, "experiment": 2, "featur": 2, "current": 2, "work": [2, 8], "onli": 2, "result": [2, 4, 7, 10, 12, 13, 15], "chang": [2, 10, 12, 13, 15], "futur": [2, 15], "bin": 2, "evalu": [2, 3, 10], "add_event_listen": [2, 4, 7], "listen": [2, 4, 7], "ruleinductionprogresslisten": [2, 4, 7], "add": [2, 4, 7], "event": [2, 4, 7], "object": [2, 4, 5, 7, 11, 12, 13], "allow": [2, 4, 7, 11], "monitor": [2, 4, 7], "progress": [2, 4, 7], "import": [2, 4, 7, 8, 15], "myeventlisten": [2, 4, 7], "def": [2, 4, 7, 10, 12, 13, 15], "on_new_rul": [2, 4, 7], "self": [2, 4, 7], "print": [2, 4, 5, 7, 8, 10, 11, 12, 13], "do": [2, 4, 7], "someth": [2, 4, 7], "fit": [2, 4, 7, 8, 10, 11, 12, 13], "ndarrai": [2, 3, 4, 7, 10], "datafram": [2, 3, 4, 7, 10, 11, 12, 15], "list": [2, 3, 4, 5, 7, 10], "label": [2, 4, 7, 10, 13], "train": [2, 4, 5, 6, 7, 8, 11, 15], "get_coverage_matrix": [2, 4, 7], "calcul": [2, 4, 7, 13], "coverag": [2, 3, 4, 5, 6, 7], "matrix": [2, 4, 7, 10], "ruleset": [2, 4, 5, 6, 7, 10, 11, 12], "coverage_matrix": [2, 4, 7], "each": [2, 3, 4, 7, 11, 12], "row": [2, 4, 7, 10, 11, 13], "everi": [2, 4, 7], "column": [2, 4, 7, 10, 11, 13, 15], "cell": [2, 4, 7, 15], "mean": [2, 4, 7, 8, 10, 12, 13], "doesn": [2, 4, 7], "np": [2, 4, 7, 10, 12, 13, 15], "get_metadata_rout": [2, 4, 7], "metadata": [2, 4, 7], "rout": [2, 4, 7], "yet": [2, 4, 7], "notimplementederror": [2, 4, 7], "_description_": [2, 4, 7], "get_param": [2, 4, 7], "dict": [2, 4, 5, 7, 10], "Not": [2, 4, 7], "hyperparamet": [2, 4, 7], "dictionari": [2, 4, 5, 7, 10, 12], "predict": [2, 4, 7, 8, 10, 13], "return_metr": [2, 10], "tupl": [2, 4, 7, 10, 12], "classificationpredictionmetr": 2, "perform": [2, 4, 7], "addit": [2, 11], "metric": [2, 6, 8, 13], "instead": [2, 4], "wasn": 2, "first": [2, 4, 7, 15], "element": [2, 4, 7], "being": 2, "second": [2, 4, 5, 6, 7], "one": [2, 4, 7, 10, 12, 13], "predict_proba": 2, "score": [2, 4, 7, 10, 12, 13], "accuraci": [2, 3, 8, 10], "test": [2, 7, 15], "wrt": [2, 4, 7], "set_param": [2, 4, 7], "kwarg": [2, 4, 7], "same": [2, 4, 7, 8], "constructor": [2, 4, 7], "expertruleclassifi": [2, 11], "extend_using_pref": [2, 4, 7, 11], "extend_using_automat": [2, 4, 7, 11], "induce_using_pref": [2, 4, 7, 11], "induce_using_automat": [2, 4, 7, 11], "consider_other_class": 2, "preferred_conditions_per_rul": [2, 4, 7], "2147483647": [2, 4, 7], "preferred_attributes_per_rul": [2, 4, 7], "expert": [2, 4, 7, 9], "knowledg": 2, "consid": [2, 4, 7], "extend": [2, 4, 7], "prefer": [2, 4, 7, 11], "automat": [2, 4, 7, 15], "": [2, 10, 12, 13], "ha": [2, 11, 15], "been": 2, "per": [2, 4, 6, 7, 10], "unlimit": [2, 4, 7], "expert_rul": [2, 4, 7, 11], "expert_preferred_condit": [2, 4, 7, 11], "expert_forbidden_condit": [2, 4, 7, 11], "either": [2, 4, 7], "pass": [2, 4, 7], "name": [2, 4, 7, 12, 13], "multiset": [2, 4, 7], "also": [2, 4, 7, 8, 15], "specifi": [2, 4, 7], "special": [2, 4, 7], "forbidden": [2, 4, 7, 11], "valy": [2, 4, 7], "alia": 3, "numpi": [3, 10, 12, 13], "panda": [3, 7, 10, 11, 12, 13, 15], "core": 3, "frame": 3, "constant": 3, "specyf": 3, "enum": 3, "differ": [3, 7, 15], "ream": 3, "more": [3, 8, 15], "about": [3, 5, 7], "its": [3, 8], "implement": [3, 15], "41": [3, 10, 11, 12, 13], "qualiti": [3, 5, 6], "_": 3, "here": [3, 10, 12, 13], "http": 3, "github": 3, "com": 3, "adaa": 3, "polsl": 3, "wiki": 3, "4": [3, 10, 11, 12, 13, 15], "binaryentropi": 3, "c1": 3, "c2": 3, "cfoil": 3, "cn2significnc": 3, "fbayesianconfirm": 3, "fmeasur": 3, "fullcoverag": 3, "georss": 3, "gmeasur": 3, "informationgain": 3, "jmeasur": 3, "kappa": [3, 10], "klosgen": 3, "laplac": 3, "lift": [3, 10], "logicalsuffici": 3, "mestim": 3, "mutualsupport": 3, "novelti": 3, "oddsratio": 3, "onewaysupport": 3, "pawlakdependencyfactor": 3, "q2": 3, "relativerisk": 3, "ripper": 3, "ruleinterest": 3, "rss": 3, "sbayesian": 3, "sensit": [3, 10], "specif": [3, 10], "twowaysupport": 3, "weightedlaplac": [3, 10], "weightedrelativeaccuraci": 3, "yail": 3, "logrank": 3, "ruleregressor": [4, 12], "mean_based_regress": [4, 11, 12], "fast": 4, "median": 4, "target": [4, 8], "coeffici": 4, "r2": 4, "expertruleregressor": [4, 11], "inductionparamet": 5, "java_object": 5, "properti": 5, "get_covering_inform": 5, "inform": 5, "covering_data": 5, "print_stat": 5, "format": [5, 15], "text": 5, "pvalu": [5, 6, 10, 12, 13], "signific": [5, 6], "stat": [5, 6, 10, 12, 13], "rulestatist": [5, 6], "weight": [5, 6], "weighted_n": 5, "account": [5, 6], "weighted_p": 5, "calculate_avg_rule_coverag": 5, "count": [5, 10, 12, 13], "averag": [5, 6, 10, 13, 15], "calculate_avg_rule_precis": 5, "calculate_avg_rule_qu": 5, "calculate_conditions_count": 5, "calculate_induced_conditions_count": 5, "calculate_signific": 5, "alpha": 5, "calculate_significance_fdr": 5, "discoveri": [5, 6], "rate": [5, 6], "correct": [5, 6], "two": 5, "field": 5, "assum": [5, 6], "calculate_significance_fw": 5, "familii": [5, 6], "wise": [5, 6], "error": [5, 6, 7, 8], "growing_tim": 5, "is_vot": 5, "pruning_tim": 5, "rulesetstatist": [5, 6], "total_tim": 5, "construct": [5, 6], "describ": [6, 10, 12, 13], "significance_level": 6, "time_total_": [6, 10, 12, 13], "time_growing_": [6, 10, 12, 13], "time_pruning_": [6, 10, 12, 13], "rules_count": [6, 10, 12, 13], "conditions_per_rul": [6, 10, 12, 13], "induced_conditions_per_rul": [6, 10, 12, 13], "avg_rule_coverag": [6, 10, 12, 13], "avg_rule_precis": [6, 10, 12, 13], "avg_rule_qu": [6, 10, 12, 13], "fdr_pvalu": [6, 10, 12, 13], "fwer_pvalu": [6, 10, 12, 13], "fraction_signific": [6, 10, 12, 13], "fraction_fdr_signific": [6, 10, 12, 13], "fraction_fwer_signific": [6, 10, 12, 13], "survivalrul": [7, 13], "survival_time_attr": [7, 11, 13], "padna": 7, "survival_tim": [7, 11, 13], "statu": 7, "omit": 7, "wa": [7, 8, 15], "estim": [7, 10, 12, 13], "correspond": [7, 15], "brier": [7, 13], "ib": [7, 13], "b": [7, 10, 11], "squar": [7, 12], "between": [7, 15], "summar": [7, 10, 12, 13], "over": 7, "observ": 7, "expertsurvivalrul": [7, 11], "requir": 8, "jre": 8, "8": [8, 10, 11, 12, 13, 15], "run": 8, "java_hom": 8, "environment": 8, "variabl": 8, "fine": 8, "both": 8, "oracl": 8, "open": [8, 11, 13, 15], "jdk": 8, "pip": 8, "To": [8, 15], "everyth": 8, "correctli": 8, "__version__": 8, "without": 8, "now": [8, 15], "we": [8, 15], "final": 8, "readi": [8, 15], "sklearn": [8, 10, 12, 13], "iri": 8, "load_iri": [8, 10], "x": [8, 10, 11, 13], "y": [8, 10, 11, 13], "classifi": 8, "accuracy_scor": [8, 10], "As": 8, "notic": 8, "easili": [8, 15], "cross": 8, "valid": 8, "hyper": 8, "tune": 8, "etc": 8, "For": 8, "head": 8, "section": 8, "present": [10, 11, 12, 13], "usag": [10, 11, 12, 13], "solv": [10, 12, 13], "seismic": [10, 11], "bump": [10, 11], "download": [10, 12, 13], "topic": [10, 12, 13], "get": [10, 12, 13], "inbuilt": [10, 12, 13], "scipi": [10, 11, 12, 13, 15], "io": [10, 11, 12, 13, 15], "arff": [10, 11, 12, 13], "pd": [10, 11, 12, 13, 15], "df_full": 10, "loadarff": [10, 11, 12, 13, 15], "astyp": [10, 11], "genergi": [10, 11], "gimpul": [10, 11], "goenergi": [10, 11], "goimpul": [10, 11], "nbump": [10, 11], "nbumps2": [10, 11], "nbumps3": [10, 11], "nbumps4": [10, 11], "nbumps5": [10, 11], "nbumps6": 10, "nbumps7": 10, "nbumps89": 10, "senergi": [10, 11], "maxenergi": [10, 11], "584000e": 10, "03": [10, 11], "2584": 10, "000000": [10, 12, 13], "9": [10, 11, 12, 13], "024252e": 10, "04": 10, "538": [10, 11], "579334": 10, "12": [10, 11, 12, 13, 15], "375774": 10, "508901": 10, "859520": 10, "393576": 10, "392802": 10, "067724": 10, "004644": 10, "4975": 10, "270898": 10, "4278": 10, "850619": 10, "065789": 10, "std": [10, 12, 13], "292005e": 10, "562": 10, "652536": 10, "319051": 10, "63": 10, "166556": 10, "364616": 10, "783772": 10, "769710": 10, "279059": 10, "068001": 10, "20450": 10, "833222": 10, "19357": 10, "454882": 10, "247962": 10, "min": [10, 12, 13], "000000e": 10, "02": 10, "96": [10, 11], "25": [10, 11, 12, 13, 15], "166000e": 10, "190": 10, "37": [10, 11, 12, 13], "36": [10, 11, 12], "50": [10, 11, 12, 13], "548500e": 10, "379": 10, "6": [10, 11, 12, 13], "75": [10, 11, 12, 13], "283250e": 10, "669": 10, "38": [10, 11, 12, 13], "30": [10, 11, 12, 13], "250000": 10, "2600": 10, "2000": 10, "595650e": 10, "06": [10, 12], "4518": 10, "1245": 10, "838": 10, "3": [10, 11, 12, 13], "402000": 10, "400000": [10, 12, 13], "matplotlib": [10, 13], "pyplot": [10, 13], "plt": [10, 13], "group": 10, "value_count": 10, "map": 10, "lambda": 10, "e": [10, 11, 13], "index": [10, 12], "fig1": 10, "ax1": 10, "subplot": 10, "pie": 10, "autopct": 10, "1f": 10, "shadow": 10, "startangl": 10, "90": [10, 12], "axi": [10, 11, 12, 13], "show": [10, 11], "tree": [10, 12], "math": [10, 12], "preprocess": [10, 12], "multilabelbinar": [10, 12], "drop": [10, 11, 12, 13], "get_prediction_metr": 10, "y_pred": [10, 12], "y_true": [10, 12], "classification_metr": 10, "confusion_matrix": 10, "tn": 10, "fp": 10, "fn": 10, "tp": 10, "ravel": 10, "npv": 10, "ppv": 10, "mae": 10, "mean_absolute_error": [10, 12], "cohen_kappa_scor": 10, "balanc": 10, "balanced_accuracy_scor": 10, "logist": 10, "loss": 10, "log_loss": 10, "psep": 10, "fall": 10, "out": 10, "youden": 10, "j": 10, "f": [10, 12, 13, 15], "fowlk": 10, "mallow": 10, "fowlkes_mallows_scor": 10, "rules_per_exampl": 10, "conflict": 10, "voting_conflict": 10, "geometr": 10, "sqrt": [10, 12], "from_record": [10, 12, 13], "get_ruleset_stat": [10, 12, 13], "__dict__": [10, 12, 13], "ipython": 10, "displai": [10, 12, 13], "clf": [10, 11], "c2_ruleset": [10, 12], "prediction_metr": 10, "c2_confusion_matrix": 10, "model_stat": 10, "corr_ruleset": [10, 12], "tmp": [10, 12, 13], "corr_confusion_matrix": 10, "concat": [10, 12, 13], "rss_ruleset": [10, 12], "rss_confusion_matrix": 10, "confus": 10, "048291": 10, "768758": 10, "184968": 10, "180": 10, "166667": 10, "14": [10, 11, 12, 13, 15], "283333": 10, "140009": 10, "917557": 10, "479462": 10, "059210": 10, "064941": 10, "923494": 10, "766667": 10, "750000": 10, "555556": 10, "930491": 10, "508517": 10, "403818": 10, "59": [10, 11], "949153": 10, "54": [10, 11, 12, 13], "118644": 10, "394514": 10, "697542": 10, "186313": 10, "030765": 10, "032032": 10, "100231": 10, "881356": 10, "864407": 10, "281667": 10, "847020": 10, "401133": 10, "62": 10, "016129": 10, "46": [10, 11, 12], "209677": 10, "597985": 10, "840503": 10, "326838": 10, "006431": 10, "006557": 10, "013879": 10, "967742": 10, "951613": 10, "919355": 10, "969040": 10, "030960": 10, "688525": 10, "778376": 10, "069314": 10, "558824": 10, "997929": 10, "969807": 10, "950000": 10, "440000": 10, "703704": 10, "967051": 10, "95": [10, 11, 12], "2409": 10, "201625": 10, "841": 10, "746770": 10, "916796": 10, "083204": 10, "324961": 10, "662925": 10, "873809": 10, "370588": 10, "955261": 10, "955657": 10, "368421": 10, "600000": [10, 12, 13], "369501": 10, "912956": 10, "108": 10, "107": 10, "2306": 10, "23": [10, 11, 12, 13, 15], "276316": 10, "1850": 10, "594986": 10, "926084": 10, "073916": 10, "227626": 10, "588608": 10, "552999": 10, "200000": [10, 12, 13], "977216": 10, "945491": 10, "382022": 10, "806742": 10, "262548": 10, "924802": 10, "55": [10, 11, 12, 13], "136": 10, "34": [10, 11, 12, 13, 15], "2359": 10, "075077": 10, "2082": 10, "442090": 10, "IF": [10, 11, 12, 13], "inf": [10, 11, 12, 13], "32": [10, 11, 12, 13], "THEN": [10, 11, 12, 13], "AND": [10, 11, 12, 13], "3700": 10, "lt": [10, 11, 12, 13], "1865": 10, "84": [10, 11, 12], "13675": 10, "17640": 10, "1635": 10, "772": 10, "650": 10, "950": 10, "2200": 10, "3500": 10, "25000": 10, "4400": 10, "217": 10, "68": [10, 11, 12], "ghazard": [10, 11], "c": 10, "536": 10, "18585": 10, "27100": 10, "297": 10, "115450": [10, 11], "1789250": 10, "786": 10, "18810": 10, "51290": 10, "shift": [10, 11], "184": [10, 13], "27": [10, 11, 12, 13, 15], "73": [10, 13], "2150": 10, "70": [10, 11, 12], "4640": 10, "135": [10, 11], "230": 10, "9110": 10, "2400": 10, "9500": 10, "395": 10, "19310": 10, "10915": [10, 11], "19510": 10, "392": 10, "20525": 10, "118": 10, "550": [10, 11], "319": 10, "seismoacoust": [10, 11], "362": 10, "380": 10, "120": 10, "350": [10, 11], "449": 10, "32875": 10, "537": [10, 11], "25125": 10, "114": 10, "31790": 10, "116": 10, "788": 10, "20930": 10, "32770": 10, "87": [10, 11], "1342": [10, 11], "1732": 10, "2168": 10, "1674705": 10, "57": [10, 13], "514": 10, "104": 10, "523": 10, "17": [10, 11, 12, 13], "46870": 10, "29": [10, 12, 13], "522": 10, "250": [10, 11], "19": [10, 11, 12, 13], "312": [10, 11], "4455": 10, "34260": 10, "36470": 10, "42165": 10, "119": 10, "516": 10, "1210": 10, "144": 10, "42430": 10, "813": 10, "1427": [10, 11], "19670": [10, 11], "9600": [10, 11], "44": [10, 11, 12, 13], "324": 10, "105": 10, "36280": 10, "49585": [10, 11], "64725": 10, "750": [10, 11], "33": [10, 12, 13], "587": 10, "27275": 10, "25250": 10, "28515": 10, "7500": [10, 11], "20610": 10, "20270": 10, "3260": 10, "8500": 10, "5050": 10, "53": [10, 11, 12, 13], "40": [10, 11, 12, 13], "20560": 10, "29105": 10, "1252": [10, 11], "28": [10, 12], "40210": 10, "850": [10, 11], "66": 10, "88": [10, 12], "7815": 10, "1500": [10, 11], "7870": 10, "31": [10, 12], "1485": 10, "44960": 10, "5500": [10, 11], "1441": 10, "117575": 10, "1752": [10, 11], "422215": 10, "2500": [10, 11], "29945": 10, "31245": 10, "29155": 10, "31615": 10, "31805": 10, "32680": 10, "158": 10, "32925": 10, "34315": 10, "35480": 10, "45240": 10, "2056": 10, "715465": 10, "305": 10, "2300": 10, "29195": 10, "9850": 10, "71000": 10, "1141": 10, "72": [10, 13], "1372": 10, "55365": 10, "1733075": 10, "2681": 10, "173815": 10, "1026530": 10, "259": 10, "39305": 10, "39": [10, 11, 12, 13, 15], "18": [10, 11, 12, 13, 14], "39695": 10, "361": 10, "3250": 10, "35000": 10, "38315": 10, "334": 10, "804": [10, 15], "44750": 10, "25150": 10, "1250": 10, "1550": 10, "44780": 10, "45255": 10, "1150": [10, 11], "1650": 10, "46690": 10, "48545": [10, 11], "769": 10, "43280": 10, "49095": 10, "40245": 10, "49265": 10, "108000": 10, "1836": 10, "673": 10, "1700": 10, "58435": 10, "526": 10, "606": 10, "17700": 10, "9550": 10, "43": [10, 11, 12], "3150": 10, "1029": 10, "58515": 10, "61125": 10, "393": 10, "725": 10, "81935": 10, "11": [10, 11, 12, 13, 15], "556": 10, "1482055": 10, "354": 10, "791": 10, "81505": 10, "366505": 10, "325": 10, "2068": [10, 11], "5750": [10, 11], "938": [10, 13], "2902": 10, "80845": 10, "508210": [10, 11], "887": 10, "977": 10, "85450": [10, 11], "1151": 10, "89": [10, 11, 12], "123990": 10, "544010": 10, "17850": 10, "189505": 10, "2078": 10, "138665": 10, "15": [10, 12, 13], "2917": 10, "1713980": 10, "18500": 10, "450275": 10, "27300": 10, "22": [10, 11, 12, 13, 15], "364": 10, "144410": 10, "21": [10, 12, 13], "10150": 10, "13850": 10, "2208": 10, "2361": 10, "493095": 10, "3011": 10, "1005720": 10, "1328": 10, "1361": 10, "10": [10, 11, 12, 13], "1443": 10, "2109": 10, "642325": 10, "9350": 10, "1394": 10, "2004": 10, "13": [10, 11, 12, 13, 15], "393900": 10, "38250": 10, "1747": 10, "3018": 10, "32750": 10, "16": [10, 12, 13], "1831": 10, "2945": 10, "254130": 10, "1133675": 10, "1600": 10, "4300": 10, "740": 10, "764": 10, "1288": 10, "61240": 10, "213225": 10, "58": [10, 12], "27350": 10, "484": 10, "10350": 10, "52070": 10, "15200": 10, "123": 10, "1139": [10, 11], "1270": 10, "54930": [10, 11], "220205": 10, "51": [10, 11, 12, 13], "754": 10, "1048": 10, "99210": 10, "201650": 10, "728": 10, "450": [10, 11], "32455": 10, "7600": 10, "160": 10, "256": 10, "4500": 10, "21865": 10, "106": [10, 11], "110": 10, "649": 10, "46930": 10, "40500": [10, 11], "78": [10, 11, 12], "237": 10, "74": [10, 11], "767": 10, "75455": 10, "1300": 10, "131": [10, 11], "735": 10, "66335": 10, "396": [10, 11], "732": 10, "40050": 10, "50765": 10, "79": 10, "152": 10, "571": 10, "651": 10, "20840": 10, "36590": 10, "525": 10, "25145": 10, "42200": 10, "45": [10, 11, 12, 13], "542": 10, "17635": 10, "21260": 10, "w": [10, 11], "240": [10, 11], "25665": 10, "49": [10, 11, 12], "3350": 10, "269": 10, "42": [10, 11, 12, 13], "4565": 10, "21365": 10, "60": [10, 11, 12], "1510": [10, 11], "4735": 10, "1410": 10, "1653": [10, 11], "1006585": [10, 11], "1684": 10, "1798": 10, "2733": [10, 11], "3146": 10, "2350": 10, "1331": [10, 11], "1655": [10, 11], "2892": [10, 11], "318735": [10, 11], "1832": 10, "1253": [10, 11], "32675": 10, "1028": 10, "373295": 10, "14350": 10, "378500": [10, 11], "901": [10, 11], "21765": 10, "20650": 10, "1378": 10, "75000": [10, 11], "2185": 10, "135285": 10, "1505475": 10, "101710": 10, "392530": [10, 11], "7250": 10, "3881": [10, 11], "81": 10, "549": 10, "537160": 10, "994": 10, "1959": [10, 11], "662435": [10, 11], "36050": [10, 11], "712": 10, "2257": 10, "61250": [10, 11], "109": [10, 11], "826925": 10, "186": [10, 11, 13], "58310": [10, 11], "934630": [10, 11], "40650": [10, 11], "521": [10, 11], "799855": [10, 11], "64": [10, 11, 13], "894": 10, "66235": 10, "1161025": [10, 11], "77": [10, 11, 12], "1548": 10, "34360": [10, 11], "207270": 10, "378": 10, "32635": 10, "622815": 10, "306": 10, "19245": 10, "81890": 10, "12050": 10, "153": [10, 11], "289": 10, "37085": 10, "65": [10, 11, 12], "98": [10, 11], "346": 10, "64310": 10, "1062020": [10, 11], "56": [10, 11, 12], "65000": 10, "52565": 10, "716085": 10, "3508": 10, "77100": 10, "13350": 10, "762": 10, "12145": 10, "134125": 10, "128": 10, "10495": 10, "176": [10, 11], "124": 10, "1445": [10, 11], "127635": 10, "4700": 10, "133": 10, "52010": 10, "653": 10, "621": 10, "28105": 10, "181": [10, 11], "470": [10, 11], "20485": 10, "27430": 10, "796": [10, 11], "13725": 10, "1050": 10, "2085": 10, "569300": 10, "126350": 10, "233": 10, "1822": 10, "1760": 10, "703425": 10, "2888": 10, "664": 10, "24700": 10, "27650": 10, "13700": 10, "1414": 10, "1950": 10, "531845": 10, "94": [10, 11, 13], "698": 10, "45830": 10, "105885": 10, "3950": [10, 11], "29200": 10, "12000": 10, "57680": 10, "483": 10, "46530": 10, "51605": 10, "836": 10, "66275": 10, "1350": 10, "797": 10, "122": 10, "16805": [10, 11], "29510": 10, "473": 10, "25310": 10, "194": 10, "9060": 10, "92850": 10, "model_select": [10, 12, 13], "stratifiedkfold": [10, 13], "n_split": [10, 12, 13], "skf": [10, 13], "c2_ruleset_stat": 10, "c2_prediction_metr": 10, "arrai": 10, "train_index": [10, 13], "test_index": [10, 13], "x_train": [10, 12, 13], "x_test": [10, 12, 13], "iloc": [10, 12, 13], "y_train": [10, 12, 13], "y_test": [10, 12, 13], "cezar": 10, "appdata": 10, "local": 10, "temp": 10, "ipykernel_36476": 10, "114429488": 10, "py": [10, 15], "runtimewarn": 10, "invalid": 10, "encount": [10, 15], "scalar": 10, "divid": 10, "characterist": 10, "127413": 10, "937007": 10, "151819": 10, "167": 10, "700000": [10, 12], "135487": 10, "639392": 10, "167726": 10, "918341": 10, "485287": 10, "046021": 10, "049992": 10, "603958": 10, "806265": 10, "787313": 10, "633591": 10, "dtype": [10, 12, 13], "float64": [10, 12, 13], "899071": 10, "100929": 10, "047367": 10, "535887": 10, "486010": 10, "117647": 10, "954127": 10, "939956": 10, "197777": 10, "140239": 10, "045873": 10, "071774": 10, "013186": 10, "073023": 10, "901979": 10, "100000": [10, 12, 13], "300000": [10, 12], "24": [10, 11, 12, 13, 15], "002394": 10, "111": 10, "180079": 10, "gonna": [10, 12, 13], "take": [10, 12, 13], "while": [10, 12, 13], "make_blob": 10, "gridsearchcv": [10, 12, 13], "linear_model": 10, "logisticregress": 10, "rang": [10, 12, 13], "measures_choic": [10, 12], "grid": [10, 12, 13], "search": [10, 12, 13], "cv": [10, 12, 13], "grid_search": [10, 12, 13], "param_grid": [10, 12, 13], "balanced_accuraci": 10, "grid_result": [10, 12, 13], "bac": 10, "best_score_": [10, 12, 13], "best_params_": [10, 12, 13], "626780": 10, "gt": [10, 12, 13, 15], "train_test_split": [10, 13], "test_siz": [10, 13], "shuffl": [10, 13], "ruleset_stat": [10, 12, 13], "221808": 10, "183045": 10, "029816": 10, "404762": 10, "357143": 10, "498744": 10, "866231": 10, "103251": 10, "021661": 10, "022077": 10, "038384": 10, "928571": 10, "903288": 10, "096712": 10, "355362": 10, "729543": 10, "340361": 10, "531250": 10, "927835": 10, "326923": 10, "294665": 10, "072165": 10, "459085": 10, "281851": 10, "897822": 10, "35": [10, 11, 12, 13], "839458": 10, "446": 10, "702077": 10, "guid": 11, "follow": 11, "scheme": 11, "introduc": 11, "guider": 11, "sikora": 11, "et": 11, "al": 11, "2019": 11, "basic": [11, 12, 13], "how": 11, "data_df": [11, 13], "forb": 11, "2965": 11, "634250": 11, "386010": 11, "1686": 11, "1004565": 11, "2184": 11, "3850": 11, "8100": 11, "48": [11, 12], "695": 11, "927": 11, "2489": 11, "6750": 11, "31200": 11, "96260": 11, "673155": 11, "10000": 11, "45000": 11, "281": 11, "34880": 11, "498": 11, "18870": 11, "33010": 11, "32795": 11, "32020": 11, "40735": 11, "methan": [11, 12], "mm116_pred": [11, 12], "mm31": [11, 12], "mm116": [11, 12], "as038": [11, 12], "pg072": [11, 12], "ba13": [11, 12], "dmm116": [11, 12], "1076": [11, 12], "13363": 11, "1077": [11, 12], "13364": 11, "13365": 11, "13366": 11, "13367": 11, "13368": [11, 12], "nan": [11, 12], "reg": [11, 12], "01": [11, 12], "1075": [11, 12], "71": [11, 12], "93": [11, 12], "20": [11, 12], "61": [11, 12, 13], "85": [11, 12, 13], "82": 11, "bmt": [11, 13], "r": [11, 13], "encod": [11, 13, 15], "cp1252": [11, 13], "fix": [11, 13], "tmp_df": [11, 13], "select_dtyp": [11, 13, 15], "stack": [11, 13], "decod": [11, 13], "unstack": [11, 13], "col": [11, 13], "replac": [11, 13], "survival_statu": [11, 13], "cd34kgx10d6": [11, 13], "extcgvhd": [11, 13], "attr": 11, "ancrecoveri": [11, 13], "srv": [11, 13], "86": 11, "pltrecoveri": [11, 13], "500142": 11, "recipientrh": [11, 13], "recipientag": [11, 13], "relaps": [11, 13], "26": [11, 12, 13, 15], "donorag": [11, 13], "gendermatch": [11, 13], "txpostrelaps": 11, "cd3dcd34": [11, 13], "97": [11, 12], "recipientageint": 11, "stemcellsourc": [11, 13], "rbodymass": [11, 13], "iiiv": [11, 13], "train_file_nam": 12, "test_file_nam": 12, "train_df": 12, "test_df": 12, "overview": [12, 13], "shape": [12, 13], "00000": 12, "363960": 12, "775007": 12, "294734": 12, "835600": 12, "308573": 12, "1073": 12, "443372": 12, "000007": 12, "79825": 12, "117105": 12, "269366": 12, "142504": 12, "106681": 12, "461922": 12, "162811": 12, "043566": 12, "28649": 12, "170000": 12, "1067": 12, "800000": 12, "20000": 12, "260000": 12, "500000": [12, 13], "1070": 12, "50000": 12, "360000": 12, "80000": 12, "450000": 12, "900000": 12, "820000": 12, "1078": 12, "ntest": 12, "5728": 12, "556652": 12, "006913": 12, "236627": 12, "819239": 12, "538408": 12, "1072": 12, "691690": 12, "000017": 12, "042458": 12, "114682": 12, "167983": 12, "104913": 12, "078865": 12, "498566": 12, "799559": 12, "046849": 12, "171393": 12, "350000": [12, 13], "460000": 12, "1071": 12, "550000": 12, "640000": 12, "980000": 12, "get_regression_metr": 12, "relative_error": 12, "squared_relative_error": 12, "relative_error_leni": 12, "relative_error_strict": 12, "nae_denomin": 12, "avg": 12, "sum": 12, "len": 12, "ab": 12, "corrcoef": 12, "absolute_error": 12, "normalized_absolute_error": 12, "squared_error": 12, "mean_squared_error": 12, "root_mean_squared_error": 12, "root_relative_squared_error": 12, "squared_correl": 12, "power": 12, "del": [12, 13], "_java_object": [12, 13], "c2_reg": 12, "regression_metr": 12, "corr_reg": 12, "rss_reg": 12, "minimum_cov": [12, 13], "maximum_uncovered_fract": [12, 13], "pruning_en": [12, 13], "max_growing_condit": [12, 13], "714300": 12, "581014": 12, "724361": 12, "107143": 12, "285714": 12, "169234": 12, "943278": 12, "808954": 12, "001581": 12, "273551": 12, "404946": 12, "47": [12, 13], "560259": 12, "380952": 12, "333333": 12, "238006": 12, "853824": 12, "047486": 12, "047487": 12, "952381": 12, "578759": 12, "240847": 12, "048612": 12, "375000": 12, "252113": 12, "738030": 12, "000004": 12, "085293": 12, "100046": 12, "093069": 12, "111329": 12, "362967": 12, "016060": 12, "126730": 12, "132221": 12, "949559": 12, "901663": 12, "072164": 12, "083687": 12, "078368": 12, "091983": 12, "307095": 12, "013119": 12, "114538": 12, "124088": 12, "964593": 12, "930439": 12, "142618": 12, "177715": 12, "150629": 12, "205215": 12, "606916": 12, "040855": 12, "202125": 12, "248199": 12, "862662": 12, "744186": 12, "1074": 12, "52": 12, "80": 12, "83": 12, "76": 12, "92": 12, "08": [12, 13], "00": 12, "91": [12, 13], "67": 12, "c2_predict": 12, "c2_regression_metr": 12, "corr_predict": 12, "corr_regression_metr": 12, "rss_predict": 12, "rss_regression_metr": 12, "101333": 12, "096754": 12, "090187": 12, "105576": 12, "698690": 12, "016746": 12, "129405": 12, "121616": 12, "829647": 12, "688314": 12, "107944": 12, "097008": 12, "095077": 12, "110730": 12, "744276": 12, "018860": 12, "137333": 12, "115550": 12, "907298": 12, "823190": 12, "194968": 12, "173126": 12, "171332": 12, "226707": 12, "344302": 12, "057323": 12, "239422": 12, "201952": 12, "628734": 12, "395306": 12, "kfold": 12, "neg_root_mean_squared_error": 12, "rmse": 12, "fold": 12, "total": 12, "162": 12, "128827": 12, "best_estimator_": 12, "856638": 12, "250233": 12, "273084": 12, "190476": 12, "809524": 12, "116152": 12, "849723": 12, "111355": 12, "103524": 12, "097884": 12, "114888": 12, "767792": 12, "019642": 12, "140148": 12, "125609": 12, "801204": 12, "641927": 12, "datasets_path": 13, "file_nam": 13, "recipientgend": 13, "donorage35": 13, "donorabo": 13, "recipientabo": 13, "abomatch": 13, "cd3dkgx10d8": 13, "time_to_agvhd_iii_iv": 13, "830137": 13, "338760": 13, "999": 13, "342466": 13, "078295": 13, "1000000": 13, "163": 13, "394521": 13, "013230": 13, "435": 13, "684932": 13, "481647": 13, "358904": 13, "972255": 13, "2043": 13, "182": 13, "575342": 13, "522750": 13, "385": 13, "183": 13, "895890": 13, "038858": 13, "634": 13, "347945": 13, "635559": 13, "1895": 13, "185": 13, "780822": 13, "077770": 13, "382": 13, "553425": 13, "948135": 13, "1109": 13, "187": 13, "472068": 13, "931551": 13, "891781": 13, "385096": 13, "745714": 13, "801081": 13, "26752": 13, "866310": 13, "90937": 13, "919786": 13, "775408": 13, "042781": 13, "743316": 13, "454545": 13, "271826": 13, "305639": 13, "914386": 13, "598716": 13, "859128": 13, "650922": 13, "161747": 13, "200525": 13, "288242": 13, "407688": 13, "418425": 13, "252689": 13, "849": 13, "589495": 13, "499266": 13, "646575": 13, "790000": 13, "204132": 13, "040000": 13, "039726": 13, "050000": 13, "786683": 13, "687500": 13, "168": 13, "550685": 13, "720000": 13, "734462": 13, "325000": 13, "676": 13, "117809": 13, "415000": 13, "823565": 13, "785000": 13, "1604": 13, "780000": 13, "99": 13, "560970": 13, "020000": 13, "103": 13, "3364": 13, "lifelin": 13, "kaplanmeierfitt": 13, "kmf": 13, "plot": 13, "ci_show": 13, "ax": 13, "xlabel": 13, "timelin": 13, "245832": 13, "209875": 13, "013907": 13, "407487": 13, "999742": 13, "000258": 13, "00029": 13, "000384": 13, "line2d": 13, "0x238cf43a910": 13, "hlamismatch": 13, "266": 13, "integrated_brier_scor": 13, "19431881630173065": 13, "rulekitjavaexcept": 13, "random_st": 13, "survival_metr": 13, "try": [13, 15], "print_java_stack_trac": 13, "append": 13, "273897": 13, "482035": 13, "790854": 13, "535119": 13, "69": 13, "852381": 13, "438761": 13, "992375": 13, "007625": 13, "007751": 13, "008209": 13, "948214": 13, "2057312271821908": 13, "scorer": 13, "214374": 13, "625197": 13, "259452": 13, "364996": 13, "430872": 13, "999995": 13, "000005": 13, "22981693833242725": 13, "0x238d0326fd0": 13, "v2": [14, 15], "mainli": 15, "focus": 15, "variou": 15, "inconsist": 15, "origin": 15, "The": 15, "creat": 15, "machin": 15, "univers": 15, "waikato": 15, "depart": 15, "comput": 15, "scienc": 15, "weka": 15, "softwar": 15, "onc": 15, "popular": 15, "becom": 15, "rather": 15, "nich": 15, "older": 15, "public": 15, "benchmark": 15, "still": 15, "avail": 15, "modern": 15, "hovew": 15, "lack": 15, "good": 15, "most": 15, "exsit": 15, "internet": 15, "drawback": 15, "problemat": 15, "thei": 15, "certainli": 15, "were": 15, "our": 15, "experi": 15, "although": 15, "convert": 15, "properli": 15, "them": 15, "byte": 15, "pars": 15, "empti": 15, "especi": 15, "numer": 15, "after": 15, "drink": 15, "consider": 15, "amount": 15, "coffe": 15, "sort": 15, "strang": 15, "bug": 15, "caus": 15, "decid": 15, "complet": 15, "mention": 15, "below": 15, "read_arff": 15, "df": 15, "additional_resourc": 15, "cholesterol": 15, "filenotfounderror": 15, "traceback": 15, "recent": 15, "last": 15, "In": 15, "onedr": 15, "pulpit": 15, "emag": 15, "git": 15, "pythonrulekit": 15, "doc": 15, "doc_env": 15, "lib": 15, "site": 15, "file_path_or_fil": 15, "iobas": 15, "utf": 15, "offer": 15, "conveni": 15, "interfac": 15, "decoded_df": 15, "object_": 15, "_arffread": 15, "802": 15, "800": 15, "ofil": 15, "801": 15, "els": 15, "803": 15, "_loadarff": 15, "errno": 15, "No": 15, "directori": 15, "provid": 15, "detail": 15, "entir": 15, "Such": 15, "interest": 15, "other": 15, "help": 15, "u": 15, "later": 15, "act": 15, "written": 15, "analog": 15, "like": 15, "api": 15, "architectur": 15, "led": 15, "mani": 15, "past": 15, "due": 15, "compar": 15, "those": 15, "report": 15, "rulekitmisconfigurationexcept": 15, "occur": 15, "normal": 15, "make": 15, "easier": 15, "prevent": 15}, "objects": {"rulekit.classification": [[2, 0, 1, "", "ExpertRuleClassifier"], [2, 0, 1, "", "RuleClassifier"]], "rulekit.classification.ExpertRuleClassifier": [[2, 1, 1, "", "add_event_listener"], [2, 1, 1, "", "fit"], [2, 1, 1, "", "get_coverage_matrix"], [2, 1, 1, "", "get_metadata_routing"], [2, 1, 1, "", "get_params"], [2, 1, 1, "", "predict"], [2, 1, 1, "", "predict_proba"], [2, 1, 1, "", "score"], [2, 1, 1, "", "set_params"]], "rulekit.classification.RuleClassifier": [[2, 1, 1, "", "add_event_listener"], [2, 1, 1, "", "fit"], [2, 1, 1, "", "get_coverage_matrix"], [2, 1, 1, "", "get_metadata_routing"], [2, 1, 1, "", "get_params"], [2, 1, 1, "", "predict"], [2, 1, 1, "", "predict_proba"], [2, 1, 1, "", "score"], [2, 1, 1, "", "set_params"]], "rulekit": [[1, 2, 0, "-", "main"], [3, 2, 0, "-", "params"], [5, 2, 0, "-", "rules"], [6, 2, 0, "-", "stats"]], "rulekit.main": [[1, 0, 1, "", "RuleKit"]], "rulekit.main.RuleKit": [[1, 1, 1, "", "configure_java_logger"], [1, 1, 1, "", "get_java_logger_config"], [1, 1, 1, "", "init"], [1, 3, 1, "", "version"]], "rulekit.operator": [[3, 4, 1, "", "Data"]], "rulekit.params": [[3, 0, 1, "", "Measures"]], "rulekit.params.Measures": [[3, 3, 1, "", "Accuracy"], [3, 3, 1, "", "BinaryEntropy"], [3, 3, 1, "", "C1"], [3, 3, 1, "", "C2"], [3, 3, 1, "", "CFoil"], [3, 3, 1, "", "CN2Significnce"], [3, 3, 1, "", "Correlation"], [3, 3, 1, "", "Coverage"], [3, 3, 1, "", "FBayesianConfirmation"], [3, 3, 1, "", "FMeasure"], [3, 3, 1, "", "FullCoverage"], [3, 3, 1, "", "GMeasure"], [3, 3, 1, "", "GeoRSS"], [3, 3, 1, "", "InformationGain"], [3, 3, 1, "", "JMeasure"], [3, 3, 1, "", "Kappa"], [3, 3, 1, "", "Klosgen"], [3, 3, 1, "", "Laplace"], [3, 3, 1, "", "Lift"], [3, 3, 1, "", "LogRank"], [3, 3, 1, "", "LogicalSufficiency"], [3, 3, 1, "", "MEstimate"], [3, 3, 1, "", "MutualSupport"], [3, 3, 1, "", "Novelty"], [3, 3, 1, "", "OddsRatio"], [3, 3, 1, "", "OneWaySupport"], [3, 3, 1, "", "PawlakDependencyFactor"], [3, 3, 1, "", "Precision"], [3, 3, 1, "", "Q2"], [3, 3, 1, "", "RSS"], [3, 3, 1, "", "RelativeRisk"], [3, 3, 1, "", "Ripper"], [3, 3, 1, "", "RuleInterest"], [3, 3, 1, "", "SBayesian"], [3, 3, 1, "", "Sensitivity"], [3, 3, 1, "", "Specificity"], [3, 3, 1, "", "TwoWaySupport"], [3, 3, 1, "", "WeightedLaplace"], [3, 3, 1, "", "WeightedRelativeAccuracy"], [3, 3, 1, "", "YAILS"]], "rulekit.regression": [[4, 0, 1, "", "ExpertRuleRegressor"], [4, 0, 1, "", "RuleRegressor"]], "rulekit.regression.ExpertRuleRegressor": [[4, 1, 1, "", "add_event_listener"], [4, 1, 1, "", "fit"], [4, 1, 1, "", "get_coverage_matrix"], [4, 1, 1, "", "get_metadata_routing"], [4, 1, 1, "", "get_params"], [4, 1, 1, "", "predict"], [4, 1, 1, "", "score"], [4, 1, 1, "", "set_params"]], "rulekit.regression.RuleRegressor": [[4, 1, 1, "", "add_event_listener"], [4, 1, 1, "", "fit"], [4, 1, 1, "", "get_coverage_matrix"], [4, 1, 1, "", "get_metadata_routing"], [4, 1, 1, "", "get_params"], [4, 1, 1, "", "predict"], [4, 1, 1, "", "score"], [4, 1, 1, "", "set_params"]], "rulekit.rules": [[5, 0, 1, "", "InductionParameters"], [5, 0, 1, "", "Rule"], [5, 0, 1, "", "RuleSet"]], "rulekit.rules.InductionParameters": [[5, 5, 1, "", "induction_measure"], [5, 5, 1, "", "pruning_measure"], [5, 5, 1, "", "voting_measure"]], "rulekit.rules.Rule": [[5, 1, 1, "", "get_covering_information"], [5, 1, 1, "", "print_stats"], [5, 5, 1, "", "pvalue"], [5, 5, 1, "", "stats"], [5, 5, 1, "", "weight"], [5, 5, 1, "", "weighted_N"], [5, 5, 1, "", "weighted_P"], [5, 5, 1, "", "weighted_n"], [5, 5, 1, "", "weighted_p"]], "rulekit.rules.RuleSet": [[5, 1, 1, "", "calculate_avg_rule_coverage"], [5, 1, 1, "", "calculate_avg_rule_precision"], [5, 1, 1, "", "calculate_avg_rule_quality"], [5, 1, 1, "", "calculate_conditions_count"], [5, 1, 1, "", "calculate_induced_conditions_count"], [5, 1, 1, "", "calculate_significance"], [5, 1, 1, "", "calculate_significance_fdr"], [5, 1, 1, "", "calculate_significance_fwer"], [5, 5, 1, "", "growing_time"], [5, 5, 1, "", "is_voting"], [5, 5, 1, "", "parameters"], [5, 5, 1, "", "pruning_time"], [5, 5, 1, "", "rules"], [5, 5, 1, "", "stats"], [5, 5, 1, "", "total_time"]], "rulekit.stats": [[6, 0, 1, "", "RuleSetStatistics"], [6, 0, 1, "", "RuleStatistics"]], "rulekit.stats.RuleSetStatistics": [[6, 3, 1, "", "SIGNIFICANCE_LEVEL"]], "rulekit.stats.RuleStatistics": [[6, 3, 1, "", "N"], [6, 3, 1, "", "P"], [6, 3, 1, "", "n"], [6, 3, 1, "", "p"], [6, 3, 1, "", "pvalue"], [6, 3, 1, "", "weight"]], "rulekit.survival": [[7, 0, 1, "", "ExpertSurvivalRules"], [7, 0, 1, "", "SurvivalRules"]], "rulekit.survival.ExpertSurvivalRules": [[7, 1, 1, "", "add_event_listener"], [7, 1, 1, "", "fit"], [7, 1, 1, "", "get_coverage_matrix"], [7, 1, 1, "", "get_metadata_routing"], [7, 1, 1, "", "get_params"], [7, 1, 1, "", "predict"], [7, 1, 1, "", "score"], [7, 1, 1, "", "set_params"]], "rulekit.survival.SurvivalRules": [[7, 1, 1, "", "add_event_listener"], [7, 1, 1, "", "fit"], [7, 1, 1, "", "get_coverage_matrix"], [7, 1, 1, "", "get_metadata_routing"], [7, 1, 1, "", "get_params"], [7, 1, 1, "", "predict"], [7, 1, 1, "", "score"], [7, 1, 1, "", "set_params"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:module", "3": "py:attribute", "4": "py:data", "5": "py:property"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "module", "Python module"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "data", "Python data"], "5": ["py", "property", "Python property"]}, "titleterms": {"rulekit": [0, 10, 11, 12, 13, 15], "tabl": [0, 1, 9, 14], "content": [0, 1, 9, 14], "code": 1, "document": 1, "classif": [2, 10, 11], "paramet": [3, 15], "regress": [4, 11, 12], "rule": [5, 10, 11, 12, 13, 15], "statist": 6, "surviv": [7, 11, 13], "quick": 8, "start": 8, "instal": 8, "packag": 8, "usag": 8, "tutori": 9, "summari": [10, 12, 13], "dataset": [10, 11, 12, 13], "decis": 10, "class": 10, "distribut": 10, "import": [10, 11, 12, 13], "helper": [10, 12, 13], "function": [10, 12, 13, 15], "calcul": [10, 12], "metric": [10, 12], "induct": [10, 11, 12, 13, 15], "full": [10, 13], "c2": [10, 12], "measur": [10, 12], "gener": [10, 12, 13], "correl": [10, 12], "rss": [10, 12], "stratifi": [10, 13], "k": [10, 13], "fold": [10, 13], "cross": [10, 13], "valid": [10, 12, 13, 15], "hyperparamet": [10, 12, 13], "tune": [10, 12, 13], "build": [10, 13], "model": [10, 12, 13, 15], "split": [10, 13], "train": [10, 12, 13], "test": [10, 12, 13], "80": [10, 13], "20": [10, 13], "expert": 11, "prepar": 11, "defin": 11, "condit": 11, "file": [12, 15], "evalu": [12, 13], "set": [12, 13], "predict": 12, "us": 12, "select": 12, "from": 12, "analysi": 13, "curv": 13, "entir": 13, "kaplan": 13, "meier": 13, "creat": 13, "ruleset": 13, "characterist": 13, "datafram": 13, "what": [14, 15], "": [14, 15], "new": [14, 15], "version": 15, "2": 15, "1": 15, "18": 15, "0": 15, "add": 15, "util": 15, "read": 15, "arff": 15, "abil": 15, "write": 15, "verbos": 15, "process": 15, "log": 15, "3": 15, "configur": 15, "fix": 15, "issu": 15}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"RuleKit": [[0, "rulekit"]], "Table of contents:": [[0, null], [1, null], [9, null], [14, null]], "Code documentation": [[1, "module-rulekit.main"]], "Classification": [[2, "classification"], [10, "Classification"], [11, "Classification"]], "Parameters": [[3, "parameters"]], "Regression": [[4, "regression"], [11, "Regression"], [12, "Regression"]], "Rules": [[5, "module-rulekit.rules"]], "Statistics": [[6, "module-rulekit.stats"]], "Survival": [[7, "survival"], [11, "Survival"]], "Quick start": [[8, "quick-start"]], "Installation": [[8, "installation"]], "Package usage": [[8, "package-usage"]], "Tutorials": [[9, "tutorials"]], "Summary of the dataset": [[10, "Summary-of-the-dataset"], [12, "Summary-of-the-dataset"], [13, "Summary-of-the-dataset"]], "Decision class distribution": [[10, "Decision-class-distribution"]], "Import RuleKit": [[10, "Import-RuleKit"], [11, "Import-RuleKit"], [12, "Import-RuleKit"], [13, "Import-RuleKit"]], "Helper function for calculating metrics": [[10, "Helper-function-for-calculating-metrics"], [12, "Helper-function-for-calculating-metrics"]], "Rule induction on full dataset": [[10, "Rule-induction-on-full-dataset"], [13, "Rule-induction-on-full-dataset"]], "C2 Measure generated rules": [[10, "C2-Measure-generated-rules"], [12, "C2-Measure-generated-rules"]], "Correlation Measure generated rules": [[10, "Correlation-Measure-generated-rules"], [12, "Correlation-Measure-generated-rules"]], "RSS Measure generated rules": [[10, "RSS-Measure-generated-rules"], [12, "RSS-Measure-generated-rules"]], "Stratified K-Folds cross-validation": [[10, "Stratified-K-Folds-cross-validation"], [13, "Stratified-K-Folds-cross-validation"]], "Hyperparameters tuning": [[10, "Hyperparameters-tuning"], [12, "Hyperparameters-tuning"], [13, "Hyperparameters-tuning"]], "Building model with tuned hyperparameters": [[10, "Building-model-with-tuned-hyperparameters"], [13, "Building-model-with-tuned-hyperparameters"]], "Split dataset to train and test (80%/20%).": [[10, "Split-dataset-to-train-and-test-(80%/20%)."]], "Validate model on test dataset": [[10, "Validate-model-on-test-dataset"], [12, "Validate-model-on-test-dataset"], [13, "Validate-model-on-test-dataset"]], "Expert Rules": [[11, "Expert-Rules"]], "Prepare dataset": [[11, "Prepare-dataset"], [11, "id1"], [11, "id4"]], "Define rules and conditions": [[11, "Define-rules-and-conditions"], [11, "id2"], [11, "id5"]], "Rule induction": [[11, "Rule-induction"], [11, "id3"], [11, "id6"]], "Train file": [[12, "Train-file"]], "Test file": [[12, "Test-file"]], "Rule induction on training dataset": [[12, "Rule-induction-on-training-dataset"]], "Evaluation on a test set": [[12, "Evaluation-on-a-test-set"]], "Prediction using the model selected from the tuning": [[12, "Prediction-using-the-model-selected-from-the-tuning"]], "Survival analysis": [[13, "Survival-analysis"]], "Survival curve for the entire set (Kaplan Meier curve)": [[13, "Survival-curve-for-the-entire-set-(Kaplan-Meier-curve)"]], "Helper function for creating ruleset characteristics dataframe": [[13, "Helper-function-for-creating-ruleset-characteristics-dataframe"]], "Generated rules": [[13, "Generated-rules"]], "Rules evaluation on full set": [[13, "Rules-evaluation-on-full-set"]], "Split dataset to train and test (80%/20%)": [[13, "Split-dataset-to-train-and-test-(80%/20%)"]], "What\u2019s new": [[14, "what-s-new"]], "What\u2019s new in RuleKit version 2.1.18.0?": [[15, "What's-new-in-RuleKit-version-2.1.18.0?"]], "1. Add utility function for reading .arff files.": [[15, "1.-Add-utility-function-for-reading-.arff-files."]], "2. Add ability to write verbose rule induction process logs to the file.": [[15, "2.-Add-ability-to-write-verbose-rule-induction-process-logs-to-the-file."]], "3. Add validation of the models parameters configuration.": [[15, "3.-Add-validation-of-the-models-parameters-configuration."]], "Fixed issues": [[15, "Fixed-issues"]]}, "indexentries": {"rulekit (class in rulekit.main)": [[1, "rulekit.main.RuleKit"]], "configure_java_logger() (rulekit.main.rulekit static method)": [[1, "rulekit.main.RuleKit.configure_java_logger"]], "get_java_logger_config() (rulekit.main.rulekit static method)": [[1, "rulekit.main.RuleKit.get_java_logger_config"]], "init() (rulekit.main.rulekit static method)": [[1, "rulekit.main.RuleKit.init"]], "module": [[1, "module-rulekit.main"], [3, "module-rulekit.params"], [5, "module-rulekit.rules"], [6, "module-rulekit.stats"]], "rulekit.main": [[1, "module-rulekit.main"]], "version (rulekit.main.rulekit attribute)": [[1, "rulekit.main.RuleKit.version"]], "expertruleclassifier (class in rulekit.classification)": [[2, "rulekit.classification.ExpertRuleClassifier"]], "ruleclassifier (class in rulekit.classification)": [[2, "rulekit.classification.RuleClassifier"]], "add_event_listener() (rulekit.classification.expertruleclassifier method)": [[2, "rulekit.classification.ExpertRuleClassifier.add_event_listener"]], "add_event_listener() (rulekit.classification.ruleclassifier method)": [[2, "rulekit.classification.RuleClassifier.add_event_listener"]], "fit() (rulekit.classification.expertruleclassifier method)": [[2, "rulekit.classification.ExpertRuleClassifier.fit"]], "fit() (rulekit.classification.ruleclassifier method)": [[2, "rulekit.classification.RuleClassifier.fit"]], "get_coverage_matrix() (rulekit.classification.expertruleclassifier method)": [[2, "rulekit.classification.ExpertRuleClassifier.get_coverage_matrix"]], "get_coverage_matrix() (rulekit.classification.ruleclassifier method)": [[2, "rulekit.classification.RuleClassifier.get_coverage_matrix"]], "get_metadata_routing() (rulekit.classification.expertruleclassifier method)": [[2, "rulekit.classification.ExpertRuleClassifier.get_metadata_routing"]], "get_metadata_routing() (rulekit.classification.ruleclassifier method)": [[2, "rulekit.classification.RuleClassifier.get_metadata_routing"]], "get_params() (rulekit.classification.expertruleclassifier method)": [[2, "rulekit.classification.ExpertRuleClassifier.get_params"]], "get_params() (rulekit.classification.ruleclassifier method)": [[2, "rulekit.classification.RuleClassifier.get_params"]], "predict() (rulekit.classification.expertruleclassifier method)": [[2, "rulekit.classification.ExpertRuleClassifier.predict"]], "predict() (rulekit.classification.ruleclassifier method)": [[2, "rulekit.classification.RuleClassifier.predict"]], "predict_proba() (rulekit.classification.expertruleclassifier method)": [[2, "rulekit.classification.ExpertRuleClassifier.predict_proba"]], "predict_proba() (rulekit.classification.ruleclassifier method)": [[2, "rulekit.classification.RuleClassifier.predict_proba"]], "score() (rulekit.classification.expertruleclassifier method)": [[2, "rulekit.classification.ExpertRuleClassifier.score"]], "score() (rulekit.classification.ruleclassifier method)": [[2, "rulekit.classification.RuleClassifier.score"]], "set_params() (rulekit.classification.expertruleclassifier method)": [[2, "rulekit.classification.ExpertRuleClassifier.set_params"]], "set_params() (rulekit.classification.ruleclassifier method)": [[2, "rulekit.classification.RuleClassifier.set_params"]], "accuracy (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.Accuracy"]], "binaryentropy (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.BinaryEntropy"]], "c1 (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.C1"]], "c2 (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.C2"]], "cfoil (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.CFoil"]], "cn2significnce (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.CN2Significnce"]], "correlation (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.Correlation"]], "coverage (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.Coverage"]], "fbayesianconfirmation (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.FBayesianConfirmation"]], "fmeasure (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.FMeasure"]], "fullcoverage (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.FullCoverage"]], "gmeasure (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.GMeasure"]], "georss (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.GeoRSS"]], "informationgain (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.InformationGain"]], "jmeasure (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.JMeasure"]], "kappa (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.Kappa"]], "klosgen (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.Klosgen"]], "laplace (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.Laplace"]], "lift (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.Lift"]], "logrank (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.LogRank"]], "logicalsufficiency (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.LogicalSufficiency"]], "mestimate (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.MEstimate"]], "measures (class in rulekit.params)": [[3, "rulekit.params.Measures"]], "mutualsupport (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.MutualSupport"]], "novelty (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.Novelty"]], "oddsratio (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.OddsRatio"]], "onewaysupport (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.OneWaySupport"]], "pawlakdependencyfactor (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.PawlakDependencyFactor"]], "precision (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.Precision"]], "q2 (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.Q2"]], "rss (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.RSS"]], "relativerisk (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.RelativeRisk"]], "ripper (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.Ripper"]], "ruleinterest (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.RuleInterest"]], "sbayesian (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.SBayesian"]], "sensitivity (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.Sensitivity"]], "specificity (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.Specificity"]], "twowaysupport (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.TwoWaySupport"]], "weightedlaplace (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.WeightedLaplace"]], "weightedrelativeaccuracy (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.WeightedRelativeAccuracy"]], "yails (rulekit.params.measures attribute)": [[3, "rulekit.params.Measures.YAILS"]], "rulekit.operator.data (built-in variable)": [[3, "rulekit.operator.Data"]], "rulekit.params": [[3, "module-rulekit.params"]], "expertruleregressor (class in rulekit.regression)": [[4, "rulekit.regression.ExpertRuleRegressor"]], "ruleregressor (class in rulekit.regression)": [[4, "rulekit.regression.RuleRegressor"]], "add_event_listener() (rulekit.regression.expertruleregressor method)": [[4, "rulekit.regression.ExpertRuleRegressor.add_event_listener"]], "add_event_listener() (rulekit.regression.ruleregressor method)": [[4, "rulekit.regression.RuleRegressor.add_event_listener"]], "fit() (rulekit.regression.expertruleregressor method)": [[4, "rulekit.regression.ExpertRuleRegressor.fit"]], "fit() (rulekit.regression.ruleregressor method)": [[4, "rulekit.regression.RuleRegressor.fit"]], "get_coverage_matrix() (rulekit.regression.expertruleregressor method)": [[4, "rulekit.regression.ExpertRuleRegressor.get_coverage_matrix"]], "get_coverage_matrix() (rulekit.regression.ruleregressor method)": [[4, "rulekit.regression.RuleRegressor.get_coverage_matrix"]], "get_metadata_routing() (rulekit.regression.expertruleregressor method)": [[4, "rulekit.regression.ExpertRuleRegressor.get_metadata_routing"]], "get_metadata_routing() (rulekit.regression.ruleregressor method)": [[4, "rulekit.regression.RuleRegressor.get_metadata_routing"]], "get_params() (rulekit.regression.expertruleregressor method)": [[4, "rulekit.regression.ExpertRuleRegressor.get_params"]], "get_params() (rulekit.regression.ruleregressor method)": [[4, "rulekit.regression.RuleRegressor.get_params"]], "predict() (rulekit.regression.expertruleregressor method)": [[4, "rulekit.regression.ExpertRuleRegressor.predict"]], "predict() (rulekit.regression.ruleregressor method)": [[4, "rulekit.regression.RuleRegressor.predict"]], "score() (rulekit.regression.expertruleregressor method)": [[4, "rulekit.regression.ExpertRuleRegressor.score"]], "score() (rulekit.regression.ruleregressor method)": [[4, "rulekit.regression.RuleRegressor.score"]], "set_params() (rulekit.regression.expertruleregressor method)": [[4, "rulekit.regression.ExpertRuleRegressor.set_params"]], "set_params() (rulekit.regression.ruleregressor method)": [[4, "rulekit.regression.RuleRegressor.set_params"]], "inductionparameters (class in rulekit.rules)": [[5, "rulekit.rules.InductionParameters"]], "rule (class in rulekit.rules)": [[5, "rulekit.rules.Rule"]], "ruleset (class in rulekit.rules)": [[5, "rulekit.rules.RuleSet"]], "calculate_avg_rule_coverage() (rulekit.rules.ruleset method)": [[5, "rulekit.rules.RuleSet.calculate_avg_rule_coverage"]], "calculate_avg_rule_precision() (rulekit.rules.ruleset method)": [[5, "rulekit.rules.RuleSet.calculate_avg_rule_precision"]], "calculate_avg_rule_quality() (rulekit.rules.ruleset method)": [[5, "rulekit.rules.RuleSet.calculate_avg_rule_quality"]], "calculate_conditions_count() (rulekit.rules.ruleset method)": [[5, "rulekit.rules.RuleSet.calculate_conditions_count"]], "calculate_induced_conditions_count() (rulekit.rules.ruleset method)": [[5, "rulekit.rules.RuleSet.calculate_induced_conditions_count"]], "calculate_significance() (rulekit.rules.ruleset method)": [[5, "rulekit.rules.RuleSet.calculate_significance"]], "calculate_significance_fdr() (rulekit.rules.ruleset method)": [[5, "rulekit.rules.RuleSet.calculate_significance_fdr"]], "calculate_significance_fwer() (rulekit.rules.ruleset method)": [[5, "rulekit.rules.RuleSet.calculate_significance_fwer"]], "get_covering_information() (rulekit.rules.rule method)": [[5, "rulekit.rules.Rule.get_covering_information"]], "growing_time (rulekit.rules.ruleset property)": [[5, "rulekit.rules.RuleSet.growing_time"]], "induction_measure (rulekit.rules.inductionparameters property)": [[5, "rulekit.rules.InductionParameters.induction_measure"]], "is_voting (rulekit.rules.ruleset property)": [[5, "rulekit.rules.RuleSet.is_voting"]], "parameters (rulekit.rules.ruleset property)": [[5, "rulekit.rules.RuleSet.parameters"]], "print_stats() (rulekit.rules.rule method)": [[5, "rulekit.rules.Rule.print_stats"]], "pruning_measure (rulekit.rules.inductionparameters property)": [[5, "rulekit.rules.InductionParameters.pruning_measure"]], "pruning_time (rulekit.rules.ruleset property)": [[5, "rulekit.rules.RuleSet.pruning_time"]], "pvalue (rulekit.rules.rule property)": [[5, "rulekit.rules.Rule.pvalue"]], "rulekit.rules": [[5, "module-rulekit.rules"]], "rules (rulekit.rules.ruleset property)": [[5, "rulekit.rules.RuleSet.rules"]], "stats (rulekit.rules.rule property)": [[5, "rulekit.rules.Rule.stats"]], "stats (rulekit.rules.ruleset property)": [[5, "rulekit.rules.RuleSet.stats"]], "total_time (rulekit.rules.ruleset property)": [[5, "rulekit.rules.RuleSet.total_time"]], "voting_measure (rulekit.rules.inductionparameters property)": [[5, "rulekit.rules.InductionParameters.voting_measure"]], "weight (rulekit.rules.rule property)": [[5, "rulekit.rules.Rule.weight"]], "weighted_n (rulekit.rules.rule property)": [[5, "rulekit.rules.Rule.weighted_N"], [5, "rulekit.rules.Rule.weighted_n"]], "weighted_p (rulekit.rules.rule property)": [[5, "rulekit.rules.Rule.weighted_P"], [5, "rulekit.rules.Rule.weighted_p"]], "n (rulekit.stats.rulestatistics attribute)": [[6, "rulekit.stats.RuleStatistics.N"], [6, "rulekit.stats.RuleStatistics.n"]], "p (rulekit.stats.rulestatistics attribute)": [[6, "rulekit.stats.RuleStatistics.P"], [6, "rulekit.stats.RuleStatistics.p"]], "rulesetstatistics (class in rulekit.stats)": [[6, "rulekit.stats.RuleSetStatistics"]], "rulestatistics (class in rulekit.stats)": [[6, "rulekit.stats.RuleStatistics"]], "significance_level (rulekit.stats.rulesetstatistics attribute)": [[6, "rulekit.stats.RuleSetStatistics.SIGNIFICANCE_LEVEL"]], "pvalue (rulekit.stats.rulestatistics attribute)": [[6, "rulekit.stats.RuleStatistics.pvalue"]], "rulekit.stats": [[6, "module-rulekit.stats"]], "weight (rulekit.stats.rulestatistics attribute)": [[6, "rulekit.stats.RuleStatistics.weight"]], "expertsurvivalrules (class in rulekit.survival)": [[7, "rulekit.survival.ExpertSurvivalRules"]], "survivalrules (class in rulekit.survival)": [[7, "rulekit.survival.SurvivalRules"]], "add_event_listener() (rulekit.survival.expertsurvivalrules method)": [[7, "rulekit.survival.ExpertSurvivalRules.add_event_listener"]], "add_event_listener() (rulekit.survival.survivalrules method)": [[7, "rulekit.survival.SurvivalRules.add_event_listener"]], "fit() (rulekit.survival.expertsurvivalrules method)": [[7, "rulekit.survival.ExpertSurvivalRules.fit"]], "fit() (rulekit.survival.survivalrules method)": [[7, "rulekit.survival.SurvivalRules.fit"]], "get_coverage_matrix() (rulekit.survival.expertsurvivalrules method)": [[7, "rulekit.survival.ExpertSurvivalRules.get_coverage_matrix"]], "get_coverage_matrix() (rulekit.survival.survivalrules method)": [[7, "rulekit.survival.SurvivalRules.get_coverage_matrix"]], "get_metadata_routing() (rulekit.survival.expertsurvivalrules method)": [[7, "rulekit.survival.ExpertSurvivalRules.get_metadata_routing"]], "get_metadata_routing() (rulekit.survival.survivalrules method)": [[7, "rulekit.survival.SurvivalRules.get_metadata_routing"]], "get_params() (rulekit.survival.expertsurvivalrules method)": [[7, "rulekit.survival.ExpertSurvivalRules.get_params"]], "get_params() (rulekit.survival.survivalrules method)": [[7, "rulekit.survival.SurvivalRules.get_params"]], "predict() (rulekit.survival.expertsurvivalrules method)": [[7, "rulekit.survival.ExpertSurvivalRules.predict"]], "predict() (rulekit.survival.survivalrules method)": [[7, "rulekit.survival.SurvivalRules.predict"]], "score() (rulekit.survival.expertsurvivalrules method)": [[7, "rulekit.survival.ExpertSurvivalRules.score"]], "score() (rulekit.survival.survivalrules method)": [[7, "rulekit.survival.SurvivalRules.score"]], "set_params() (rulekit.survival.expertsurvivalrules method)": [[7, "rulekit.survival.ExpertSurvivalRules.set_params"]], "set_params() (rulekit.survival.survivalrules method)": [[7, "rulekit.survival.SurvivalRules.set_params"]]}})